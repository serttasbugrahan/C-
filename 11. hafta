//////////////////////////////////////////////////////////////////////1. Ders//////////////////////////////////////////////////////////////////////////

int main()
{
using namespace std;

string name{ "mert" };
string surname{ "kaptan" };

auto s = name + ' ' + surname + "oglu";
//operator+(operator+(name, ' '), surname), "oglu");
}

-------

c++ içindeki c'yi bilmeyenlerin yaptığı bir hata

int main()
{
using namespace std;
string name{ "mert" };

const char* p = "can";
name + "yasar" + "can"; //
"yasar" + p + name //hata 2 pointer toplanıyor
}

--------

int main()
{
using namespace std;
int x{}, y{};

int* p1 = &x;
int* p2 = &y;

p1 + p2;
}

---------------------------------

string sınıfı yazılardan sayılara
sayılardan yazılara dönüşüm olanağı verir

int main()
{
using namespace std;

to_string()
int ival{};
cout << "bir tam sayi giriniz: ";
cin >> ival;

auto str = to_string(ival);
cout << '|' << str << '|';

}

-------

int main()
{
using namespace std;

int ival{};
cout << "bir tam sayi giriniz: ";
cin >> ival;

string str;
int x = 56;
str = x; //operator=(char)
}

--------

int main()
{
using namespace std;

string s{ "ali23874furkan" };
cout << "|" << s << "|\n";
try
{
auto ival = stoi(s)
auto ival = stoi(s)
  cout << "ival = " << ival << "|\n";
}
catch(const std::exception& ex)
{
	std::cout << "expection caught: " << ex.what() << '\n';
}
}

-----------

int main()
{
using namespace std;

string s{"23874furkan" };

size_t idx{};
auto ival = stoi(s, &idx);

cout << "ival = " << ival << '\n';
cout << "idx = " << idx << '\n';
}

------------
//aşaüıdaki örnekler sadece string sınıfına özel değildir 
containerlara özeldir

#include <algorithm>

int main()
{
using namespace std;

string str;

std::cout << "bir yazi girin: ";
getline(cin, str);
char c = 'e';
auto n = count(str.begin(), str.end(), c)

cout << "n = " << n << '\n'; 
}

--------

#include <algorithm>

int main()
{
using namespace std;

string str;

std::cout << "bir yazi girin: ";
getline(cin, str);

cout << "|" << str << "|\n";
reverse(str.begin(), str.end());
cout << "|" << str << "|\n";
}

---------

int main()
{
using namespace std;
string str;

std::cout << "bir yazi girin: ";
getline(cin, str);

cout << "|" << str << "|\n";

auto n = erase(str, 'e');

cout << "|" << str << "|\n";
cout << "n = " << n << "|\n";

}

=======================================================================

expection handling
-------------------

kod yanlış yazılmış ==> programming errors (cpding errors)

kodlama hataları ile başa çıkmanın en temel yolu assertions (doğrulama)

assertions (doğrulama)
    dynamic assertions (runtime)
    static assertions (compile time)

---------

c dilinde aşağıda ki şekilde yapıyorduk

#
assert(x > 0);

void func(int *ptr)
{
assert(ptr != NULL);
assert(b != 0);
int x = a / b;
}

-------

c11 ile gelen static assert

static_assert(sizeof(int) > 2);

int main()
{

}

----------------
geleneksel hata işleme:
-----------------------

eğer fonksyion işini yapamadığını 
kendisini çağıran koda bir şekilde bildiriyorsa buna geleneksel hata işleme nedir

1. dezavantaj : iş gören kod ile hata işleyen kodun iç içe geçmesi
kodun anlaşılması vs. her şey zorlaşır

2. dezavantaj : hatanın fonksiyon tarafından kendisini çağıran koda bildirilmesi

f1 ==> f2 ==> f3 ==> f4 ==> f5, bu fonksiyonlar birbirini çağırdığı için hata f1 hatası her yerde gözükebilir

böyle bir durumda f5'te gözüken hata f1' e geçmeli

f1 ==> f2 ==> f3 ==> f4 ==> f5
<-----------------------------

3.dezavantaj : zorlayıcı bir mekanizmanın olmaması

------------

en büyük risk ctor'lardır çünkü geri dönüş değeri yoktur

----------------------------------

expection handling araçları : çalışma zamanı hatalarının ele alınması
-----------------------------

throw 
try 
catch

--------

throw : işimi yapamamakla ilgili bilgiyi size ileticek bir nesne oluşturdum ve bu nesneyi size gönderiyorum
   throw statement	

try block : bir hata gönderilirse ben bu hatayı yakalamakla görevliyim demektir
try {

}

catch block : hataya müdahale eden kodu temsil ediyor (exception handler)

---------

try {
f1();
}
catch(int) { //birden fazla catch olabilir

}
catch(long) { //long türünden ise buraya

}
catch(double) { //double türünden ise buraya

}

--------
to catch an exception
uncaught exception
--------

bit hata nesnesi gönderildi
ve bu hata nesnesi yakalanamadi
bu durumda ne olur?

uncaught exception olur bu durumda
std::terminate çağrılır, std::terminate'de 
abort çağırır

---------

using terminate_handler = void (*)();
typedef void (*terminate_handler)();

terminate_handler set_terminate(terminate_handler);

------------------

void f4()
{
	std::cout << "f4 cagrildi\n";
	throw 1; // program burada biticek
	std::cout << "f4 sona erdi\n ";
}

void f3()
{
	std::cout << "f3 cagrildi\n";
	f4();
	std::cout << "f3 sona erdi\n";
}

void f2()
{
	std::cout << "f2 cagrildi\n";
	f3();
	std::cout << "f2 sona erdi\n";
}

void f1()
{
	std::cout << "f1 cagrildi\n";
	f2();
	std::cout << "f1 sona erdi\n";
}

int main()
{
	std::cout << "main basladi\n";
	f1();
	std::cout << "main sona erdi\n";
}

---------------

void myabort()
{
	std::cout << "myabort cagrildi\n";
	exit(EXIT_FAILURE);
}
void f4()
{
	std::cout << "f4 cagrildi\n";
	throw 1; // program burada biticek
	std::cout << "f4 sona erdi\n ";
}

void f3()
{
	std::cout << "f3 cagrildi\n";
	f4();
	std::cout << "f3 sona erdi\n";
}

void f2()
{
	std::cout << "f2 cagrildi\n";
	f3();
	std::cout << "f2 sona erdi\n";
}

void f1()
{
	std::cout << "f1 cagrildi\n";
	f2();
	std::cout << "f1 sona erdi\n";
}

int main()
{
set_terminate(&myabort);
std::cout << "main basladi\n"
f1();
std::cout << "main sona erdi\n"
}

------------

//exception main içinde de yakalanabilir

void myabort()
{
	std::cout << "myabort cagrildi\n";
	exit(EXIT_FAILURE);
}
void f4()
{
	std::cout << "f4 cagrildi\n";
	throw 1; // program burada biticek
	std::cout << "f4 sona erdi\n ";
}

void f3()
{
	std::cout << "f3 cagrildi\n";
	f4();
	std::cout << "f3 sona erdi\n";
}

void f2()
{
	std::cout << "f2 cagrildi\n";
	f3();
	std::cout << "f2 sona erdi\n";
}

void f1()
{
	std::cout << "f1 cagrildi\n";
	f2();
	std::cout << "f1 sona erdi\n";
}

int main()
{
std::cout << "main basladi\n";
try { //eğer try bloğu içinde çalışan koddan hata nesnesi göderilirse
f1();
}
catch(int) { //ve gönderilen hata nesnesinin türü int ise programın akış
//buraya çekilicek
std::cout << "hata yakalandi(catch(int)\n";
}

std::cout << "devam ediyor\n";
}

!! dönüşüm olmaz catch int ise throwda int olmak zorunda

-------------

void myabort()
{
	std::cout << "myabort cagrildi\n";
	exit(EXIT_FAILURE);
}
void f4()
{
	std::cout << "f4 cagrildi\n";
	throw 1; // program burada biticek
	std::cout << "f4 sona erdi\n ";
}

void f3()
{
	std::cout << "f3 cagrildi\n";
	f4();
	std::cout << "f3 sona erdi\n";
}

void f2()
{
	std::cout << "f2 cagrildi\n";
	f3();
	std::cout << "f2 sona erdi\n";
}

void f1()
{
	std::cout << "f1 cagrildi\n";
	f2();
	std::cout << "f1 sona erdi\n";
}

int main()
{
std::cout << "main basladi\n";
try { 
f1();
}
catch(int) { 
std::cout << "hata yakalandi(catch(int)\n";
}
catch(unsigned int) { 
std::cout << "hata yakalandi(catch(double)\n";
}
catch(float) { 
std::cout << "hata yakalandi(catch(float)\n";
}
std::cout << "devam ediyor\n";
}

---------------------

2 ayrı throw vardır

throw; //rethrow

throw MathError{} //matematik ile ilgili bir hata

throw std::bad_alloc{} //allocation ile ilgili bir hata var demek

-------------------

	       ExceptionBase

MathException  StringException  FileException
		    FileReadException FileWriteException



--------------------

void myabort()
{
	std::cout << "myabort cagrildi\n";
	exit(EXIT_FAILURE);
}
void f4()
{
	std::cout << "f4 cagrildi\n";
	throw DivideByZero{};
	std::cout << "f4 sona erdi\n ";
}

void f3()
{
	std::cout << "f3 cagrildi\n";
	f4();
	std::cout << "f3 sona erdi\n";
}

void f2()
{
	std::cout << "f2 cagrildi\n";
	f3();
	std::cout << "f2 sona erdi\n";
}

void f1()
{
	std::cout << "f1 cagrildi\n";
	f2();
	std::cout << "f1 sona erdi\n";
}

int main()
{
std::cout << "main basladi\n";
try { 
}
catch(DivideByZero&) //değişkeni kullanmıycam isim verme
{ //upcasting vardır ExBase& dahil hepsini yakalayabilir
std::cout << "hata yakalandi\n";
}
std::cout << "devam ediyor\n";
}

-----------------

//out_of_range ==> logic_error ==> exception

void f4()
{
	std::cout << "f4 cagrildi\n";
	std::string str{"emrecan"};

	auto c = str.at(456);
	std::cout << "f4 sona erdi\n ";
}

void f3()
{
	std::cout << "f3 cagrildi\n";
	f4();
	std::cout << "f3 sona erdi\n";
}

void f2()
{
	std::cout << "f2 cagrildi\n";
	f3();
	std::cout << "f2 sona erdi\n";
}

void f1()
{
	std::cout << "f1 cagrildi\n";
	f2();
	std::cout << "f1 sona erdi\n";
}

int main()
{
std::cout << "main basladi\n";
try { 
f1();
}
catch(const std::exception& ex) //bütün hataları yakalar
//    const std::logic_error& ex) //logic hataları yakalar	
//    const std::out_of_range& ex) //out_of_range hataları yakalar	
{
std::cout << "hata yakalandi\n" << ex.what() << "\n";
}

std::cout << "devam ediyor\n";
}

--------------
//bu yapı lojik açıdan yanlış çünkü en üsttteki genel olarak yakaladağı için
aşağıdakilere yakalama şansı bırakmaz

int main()
{
std::cout << "main basladi\n";
try { 
f1();
}
catch(const std::exception& ex) 
{
std::cout << "hata yakalandi\n" << ex.what() << "\n";

}
catch const std::logic_error& ex)
{
std::cout << "hata yakalandi\n" << ex.what() << "\n";

}
catch const std::out_of_range& ex) 	
{
std::cout << "hata yakalandi\n" << ex.what() << "\n";
}

std::cout << "devam ediyor\n";
}

-------------

özel bir catch yapısı

int main()
{
std::cout << "main basladi\n";
try { 
f1();
}
catch(...)  //catch all, hangi türden olursa olsun tüm hataları yakalar
{
}

//////////////////////////////////////////////////////////2. Ders/////////////////////////////////////////////////

class Nec {
unsigned char buf[1024 * 1024]{};
};

int main()
{
std::vector<Nec*> nvec;
int i{};
try{
for (i = 0; i < 1'000'000; ++i) {
nvec.push_back(new Nec{});
}
}
catch (const std::exception& ex) {
std::cout << "exception caught: " << ex.what() << '\n';
std::cout << "i = " << i << '\n';
}
}


------------------

#include <string>

int main()
{
using namespace std;

string str(10, 'A');

try
{
	auto c = str.at(463);
}
//catch(const std::exception& ex) //hatayı yakalar
//catch(const std::out_of_range& ex) //hatayı yakalar
//catch(const std::logic_error& ex) //hatayı yakalar
//catch(...) //catch all
catch(const std::out_of_range& ex)
{
	std::cout << "exception caught: " << ex.what() << '\n';
}

}

//sırlamaa özelden genele olmalı


----------------------------

hatayı neden yakalarız?
-hataya müdahele etmek için

1) resumption :  exception yakalanır bir kaynak sızıntısı olmadığı 
garantisi sağlanmıştır programın akışı o noktadan devam eder

2) terminate : exception yakalanır ancak o exception yakalandıktan sonra
programın sağlıklı bir şekilde çalışmasının şansı yoktur ve program sonlandırılır

3) kismi müdahale : exception yakalanır bir takım işlemler yaparız
ancak benim sorumluluğum bu kadar diyip exception tekrar göndeririz
exception rethrow ederiz

4) translate etmek : bizim yakaladığımız exception daha alt seviyede bir
exception ama kendi clientlarınız için daha yüksek seviyede exception
gönderiyoruz


--------------

int foo();

int main()
{
	using namespace std;

	try
	{
		int x = foo();
	}
	catch (const std::exception &ex)
	{
		std::cout << "hata yakalandi x = " << x << '\n'; //block scopedan dolayı geçersiz
	}
}

------------

int foo();

int main()
{
	using namespace std;

	try
	{

	}
	catch (const std::exception &ex)
	{
		int x{};
	}

	x++; //Hata olur try ve catch ikiside bloktur
}


----------------

a) gönderilen exception'lar yakalanıyor mu
b) hataların yakalanmasi durumunda kaynak sızıntısı oluyor mu?

-------------
//burada kaynak sızıntısı olur

class Myclass{

};

void foo();
void bar();

void func()
{
Myclass *p = new Myclass;
foo();
bar(); 
delete p;
}

------------

kaynak sızıntısı nasıl engellenir ?
-RAII

stack unwinding (yığının geri sarımı)

f1 ==> f2 ==> f3 ==> f4 ==> f5 

----------
//stack unwinding (yığının geri sarımı) yapısı
//bu yapı bize sen exception yakalarsan otomatik ömürlü nesnelerin destroy edilicek
//dinamik ömürlü nesneler için bu durum geçerli değildir

class Myclass {

public:
~Myclass()
{
std::cout << this << "adresindeki Myclass nesnesinin kaynaklari geri veriliyor";
}

private:
int ar[100]{};

};

void f4()
{
Myclass m4;
throw std::exception{}; //tek başına tr catch olmadan hata verir
}

void f3()
{
Myclass m3;
f4();
}

void f2()
{
Myclass m2;
f3();
}

void f1()
{
Myclass m1;
f2();
}


int main()
{
try
{
f1();
}
catch(const std::exception& ex)
{
std::cout << "exception caught: "<< ex.what() << '\n';
}
}

---------------

class Myclass {

};

void foo();
void bar();

void func()
{
FILE* f = fopen("necati.txt", "w);

foo();
bar();

fclose(f); //dosya kapatılmaz kaynak sızıntısı olur
}

--------------

class File {
public:
File(const char*);
~File();
};

void foo();
void bar();

void func()
{
File myfile("necati.txt");

foo();
bar();
}

--------------

aksi biçimde bir durum olmadıkça
dinamik ömürlü nesneleri (ya da genel olarak kaynakları)
ham pointer'lar ile değil
smart pointer nesneleri ile kullanın

----------------------------------------------

exception'in rethrow edilmesi: yakalanan hatanın tekrar gönderilmesi, yeniden throw etme
------------------------------
!!eğer catch parametresini kullanmıycak isim vermeyin, okuyan yanılır
!!eğer catch parametresi referans ise const'dikka et ve const kullan

rethrow sentaxı:

try {
foo();

}
catch(const std::MathError& ex) {
throw;
}

---------

//aşağıdaki yapı rethrow statement değildir.
try {
foo();

}
catch(const std::bad_alloc& ex) {
throw ex;
}

-----------

void func()
{
	try
	{
		throw std::out_of_range{"range hatasi"};
	}
	catch(const std::exception& ex)
	{
		std::cout << "hata func icinde yakalandi: "<< ex.what() << '\n';
		//iki farkli throw statement arasındaki farkı görünüz
		//throw ex; //dinamik tür bilgisini kaybeder exception catch yakalar yakalar
		throw; //dinamik tür bilgisi değişmez
		
	}
	
}

int main()
{
	try
	{
		func();
	}
	catch(const std::out_of_range& ex)
	{
		std::cout << "hata yakalandi (std:out_of_range)\n";
	}
	
	catch(const std::exception&)
	{
		std::cout << "hata yakalandi (std:exception)\n";
	}
	
}

-----------------

struct NecEx
{
	unsigned char buffer[1024]{};
};

void func()
{
	try
	{
		throw NecEx{};
	}
	catch(const NecEx& necex)
	{
		std::cout << "&necex=  "<< &necex << '\n';
		//throw //aynı adres yazar
		throw necex; //farklı adres yazar
		
	}
}

void foo()
{
	try
	{
		func();
	}
	catch(const NecEx& necex)
	{
		std::cout << "&necex=  "<< &necex << '\n';
	}
}

int main()
{
foo();
}

---------------

void bar()
{
std::cout << "bar called!\n";
throw;
}

void foo()
{
try{
if (1) {
//throw std::out_of_range{} //hata
throw std::out_of_range{"out of range} //legal
}
}
catch (const std::exception& ex) {
std::cout << "exception caught: " << ex.what() << '\n';
bar();
}
}

int main()
{
try {
foo();
}
catch (const std::exception& ex) {
std::cout << "exception caught: " << ex.what() << '\n';
}
}

------------
//aşağıdaki durumda terminate çağrılır
//terminate azraildir!!

void bar()
{
throw;
}

int main()
{
bar();
}

!! eğer bir rethrow statement yürütüldüğünde yakalanmış bir hata nesnesi yok ise
std::terminate çağrılır

------------

void bar()
{
throw;
}

int main()
{
try {
bar();
}
catch (...) { //terminate edilir
catch (const std::exception& ex) { //terminate edilir
std::cout << "exception caught: " << ex.what() << '\n';
}
}

----------------------------------

!! bir nesne hayata getirilemiyor ise ctor yapması gereken exception throw etmek

//aşağıdaki yapıda dtor çağrılmaz, ctor hayatı bitmemiştir
//böyle durumlarda da akıllı pointer kullanmak gerekir
//akıllı pointer olsaydı hayata gelen dtor çağrılcaktı

#include <stdexcept>
class Myclass {
public:

Myclass(int x)
{
if (x <	 0) {
throw std::invalid_argument{"gecersiz arguman"};
}
}
~Myclass() //kaynak sızıntı olucak
{
std::cout << "Myclass destructor\n";
}
};

int main()
{
try {
Myclass m{ -12 };
}
catch (const std::exception& ex) {
std::cout << "exception caught: " << ex.what() << '\n';
}
}

----------------

exception safety : gönderilen exceptionlar yakalanacak exception yakalandığı zaman 
bir kaynak sızıntısı olmıycak

kaynak sızıntısı olmayan kodlara exception safe denir.	

--------------

class A {
public:
A(int)
{
std::cout << "A(int) ctor\n";
}
~A()
{
std::cout << "A(int) dtor\n";
}
};

class B {
public:
B(int)
{
std::cout << "A(int) ctor\n";
}
~B()
{
std::cout << "A(int) dtor\n";
}
};

class Myclass {
public:

Myclass() : ax(0), bx(1)
{
if (1)
{
throw std::bad_alloc{};
}
}

~Myclass()
{
std::cout << "Myclass detor\n";
}
private:
A ax;
B bx;
};

void foo()
{
Myclass m;
}


int main()
{
try{
foo();
}
catch (const std::exception& ex) {
std::cout << "exception caught: " << ex.what() << '\n';
}
}

---------------
//hayata gelmiş nesnelerin dtor'ları çağrılıcak

class A
{
public:
	A(int)
	{
		std::cout << "A(int) ctor\n";
	}
	~A()
	{
		std::cout << "A(int) dtor\n";
	}
};

class B
{
public:
	B(int x)
	{
		std::cout << "B(int) ctor\n";
		if (x > 0)
		{
			throw std::invalid_argument{"gecersiz deger"};
		}
	}
	~B()
	{
		std::cout << "B(int) dtor\n";
	}
};

class Myclass
{
public:
	Myclass() : ax(0), bx(1)
	{
	}
	~Myclass()
	{
		std::cout << "Myclass detor\n";
	}

private:
	A ax;
	B bx;
};

void foo()
{
	Myclass m;
}


int main()
{
	try
	{
		foo();
	}
	catch (const std::exception &ex)
	{
		std::cout << "exception caught: " << ex.what() << '\n';
	}
}

------------
//nec dtor çağrılmadığı için mp içinde dtor çağrılmıycak

class Member {
public:
Member()
{
std::cout << "Member ctor\n";
}

~Member()
{
std::cout << "Member dtor\n";
}
 
};

class Nec {
public:
Nec() : mp {new Member} 
{
throw 1;
}
~Nec(){ //member dtor çağrılmıycak, smart pointer kullanılmalı
delete mp;
}
private:
Member* mp;
};

int main()
{
try {
Nec mynec;
}
catch (int ) {
std::cout << "exception caught\n";	
}
}

-------------------

class Member {
public:
Member(int x)
{
std::cout << "Member ctor\n";
if (x < 0)
throw std::runtime_error{"exception from member\n"}; 
}
};

//hatayı nec ctor'da yakalamanın bir yolu var mı

class Nec {
public:
Nec(int val) : mx(val)  //nec'i ctoru mx(val)'i  yakalamanın yolu function try block kullanarak yakalar, özell bir sentax ile yani
{
try {

}
catch (...) {
std::cout << "hata yakalandi\n";
}
}
private:
Member mx;
};

int main()
{

Nec mynec(-23);
}

---------------------

function try block:
-------------------
//sentaxı

void func(int x)
try{

}
catch (const std::bad_alloc& ex) {

}

-------

int func(int x)
try{

if (x < 0)
throw std::runtime_error{"gecersiz deger"};;
return 3;
}
catch (const std::runtime_error&) {
return 1; //hata yok
}

---------

int func(int x)
try{
int y = 5;
if (x < 0)
throw std::runtime_error{"gecersiz deger"};

return 3;
}
catch (const std::runtime_error&) {
return x * y; //hata
}

----------
//mülakatlarda sorulur

class Member {
public:
Member(int x)
{
std::cout << "Member ctor\n";
if (x < 0)
throw std::runtime_error{"exception from member\n"};
}
};


class Nec {
public:
Nec(int val) try : mx(val)  
{

}
catch(const std::exception& ex){
std::cout << "exception caught..." << ex.what()  << '\n';
(void)getchar(); //kaldırırsak hata olur
//burada ya program sonlanıcak (terminate edilicek), ya throw edilicek, ya da başka bir exception göndericez 
}
private:
Member mx;
};

int main()
{
Nec mynec(-23);
}

------------

class A {
public:
A() = default;
A(const A&)
{
std::cout << "A copy ctor\n";
throw std::runtime_error{"error form copy ctor class A\n"}
}
};

class Nec {
public:
Nec(A) try
{

}
catch (const std::exception& ex) {
std::cout << "exception caught... " <<ex.what() << '\n';
(void)getchar();
}
private:
};

int main()
{
A ax;
Nec mynec(ax);
}

---------------------
//mülakatlarda çok sorulur

exception gurantee(s):
----------------------

kesinlikle olmaması gereken bir durum:
exception yakalandığında eğer bir kaynak sızıntısı (memmory leak ile karıştırma,
mesela dosyanın kapatılmaması) oluşması ya da programın geçersiz bir duruma gelmesi

basic guarantee : exception göderildiğinde bir kaynak sızıntısı olmıycak
bu garanti altına alınıcak nesnesin ya da nesnelerin stati geçerli olucak
bu şartların sağlanmasına denir. yazılan kodun en az bu şartı sağlaması gerekir

strong guarantee : basic'in üstüdür, basic'e ek olarak state'de değiştirmez
'commit or rollback' da denir. ya işini yap ya da işe başlaamdan önceki state'i koru

nothrow guarantee : strong üstüdür, exception göndermemeyi garanti eder

-----------
exception specification : eski cpp de var artık bu yok, bunun yerine noexcept var

//eski cpp'de aşağıdaki şekildeymiş sentax

void func(int) //bu konuda bilgi vermiyorum
void func(int) throw(std::bad_alloc, std::invalid_argument); //bu listeki türlerden exception gönderir
void foo(int)throw(); //exception göndermeme garantisi veriyor

/////////////////////////////////3. Ders////////////////////////////////

noexcept: ben exception göndermeme garantisi veririm
---------

noexcept bir anahtar sözcüktür ancak iki farklı anlamda kullanılır

-noexcept specifier
-noexcept operator


void foo(int)noexcept; //bu fonksiyon exception göndermez
//hem okuyucuya söyler hem derleyiciye

!! exception göndermeme garantisine rağmen exception gönderirse terminate çağrılır

-----
#include <exception>

void func()
{
if (1) {
throw std::exception{};
}
}

void foo()noexcept
{
func();
}

void myterminate()
{
std::cout << "my terminate called!\n";
abort();
}

int main()
{
set_terminate(myterminate);

try {
foo();
}
catch (const std::exception& ex) {
std::cout << "exception caught:" << ex.what() << '\n';
}
}

--------------

void foo()noexcept(constant expression);

void foo()noexcept(true); //aşağıdaki ile aynı anlamda
void foo()noexcept; 

void bar()noexcept(false); //aşağıdaki ile aynı anlamda
void bar(); 	


//bir fonksiyonun no throw garantisi verip vermemesini bir koşula bağlıycaz.
//varlık nedeni templateler ile alakalı

void foo()noexcept(sizeof(int) > 2);

-----------------------------------

cpp dilinde 2 farklı kod vardır:

normal olan

derleyiciye yazdırılan kod = template / meta kod

-----------------------------------

noexcept operator

noexcept(expr) //bu ifade ya true ya da false, compiler time'da belli olur

-------

noexcept(expr) 
//eğer expression throw etme şansı yok ise noexcept true değeri üretir
//aksi halde false üretir

int main()
{
int a[5]{};
constexpr bool b = noexcept(a[3]); //true
}

--------

int main()
{
int x = 4576;
constexpr bool b = noexcept(++x); //true
}

-------

void foo(int); //expression throw etmeme garantisi vermez

int main()
{
constexpr bool b = noexcept(foo(4)); //false
}

---------

void foo(int)noexcept;

int main()
{
constexpr bool b = noexcept(foo(4)); //true
}

---------

class Myclass {
public:
void foo(int, int);
};

int main()
{
constexpr bool b = noexcept(Myclass{}.foo (1, 5)); //falss
}

----------

class Myclass {
public:
void foo(int, int)noexcept;
};

int main()
{
constexpr bool b = noexcept(Myclass{}.foo(1, 5)); //true
}

-----------

class Myclass {};
void func()noexcept(noexcept(Myclass{}));
	 ---------- --------
	  specifier  operator

------------

class Myclass {
public:
Myclass& operator++();
};

void func(Myclass m)noexcept(noexcept(++m));
//func fonksiyonunun expression throw etmeme garantisi
verip vermemesi ++m ifadesinin expression throw etmeme garantisine bağlanıyor

------------

template <typename T>
void func(T x) noexcept(noexcept(++x)); //no throw garantisi veriyor ise 
func'da no throw garantisi verir

-----------
#include <exception>
#include <type_traits>

template <typename T>
void func(T x)noexcept(noexcept(++x) && noexcept(--x));

class Myclass {
public:
Myclass& operator++()noexcept;
Myclass& operator--()noexcept;
};

int main()
{
Myclass mx;
constexpr auto b = noexcept(func(12));
}

-------------

//taban sınıfın sanal fonksiyonunu override ederken 
onun verdiği garantiyi gevşetemeyiz

class Base {
public:
virtual void func()noexcept;
};

class Der : public Base {
public:
void func()override; //sentax hatası, çünkü
//taban sınıf expression throw etmeme garantisi verir, func override expression
throw edebilir
};

!! taban sınıf sanal fonksiyonu eğer noexcept ile bildirilmişse
onu override edicek türemiş sınıfta noexcept olmak zorunda bu compiler time'da kontrol edilir

----------------

class Base {
public:
virtual void func()noexcept;
};

class Der : public Base {
public:
void func()noexcept override; 
};

-----------------

void func(); //bu sentax hatası
void func()noexcept;

----------------
//burası function pointer ile ilgili

void foo();

int main()
{
int (*fp)(int)noexcept; //fp'ye yapılan çağrılar expression throw etmez

fp = foo; //hata, foo expression throw etmemesi şazım

fp(12);
}

-----------------

int foo(int)noexcept;

int main()
{
int (*fp)(int);

fp = foo; //legal, foo 	expression throw eder  ya da etmez buna
}

------------
//dtorlar için özel bir durum

class Myclass {
public:
~Myclass();

};

int main()
{
constexpr bool b = noexcept(Myclass{}.~Myclass()); //false olmaz çünkü dtor'lar her zmana no excepts
}

-----------------

stack unwinding : exception gönderiliyor exception yakalanıyor
yakalandığı otomatik ömürlü nesneler destroy edilir.

//asla asla dtor expresion throw etmemeli demiyruz

class Myclass {};

int main()
{
Myclass m;
}

-------------------

bazı fonksiyonların ideal olarak no throw garantisi vermesi gerekir
eğer vermesse problemler olabilir

-move ctor
-swap
-memory deallocation

------------------

bir sınfın no throw garantisi verip vermemesi neden önemli ?

derleyici noexcept gördüğü zmaan move ctor ile aktardı bu da optmizasyon açısından 
oldukça öenmlidir. 
noexcept yok ise copy ctor çağırdı


-------------------

class Nec {
public:
};

class Myclass {
Nec nec;
};

int main()
{
constexpr bool b = noexcept(Myclass{}); //true
}

-------------

class Nec {
public:
Nec(); //noexcept olsaydı true olucaktı
};

class Myclass {
Nec nec;
};

int main()
{
constexpr bool b = noexcept(Myclass{}); //false
}

------------
//c++20 ile geldi

class A {
public:
A();
};

class Nec {
public:
Nec()noexcept = default;

private:
A ma;
};

int main()
{
constexpr auto b = noexcept(Nec{});
}

==========================================================================
GENERIC PROGRAMMING IN C++
(templates)

türden bağımsız

--------------------------

c dilinde bu türden bağımsızlık gerektiren (generic programlama) işleri void pointer ile yapabiliyroduk 

void gswap(void* vp1, void* vp2, size_t sz)
{
char* p1 = (char*)vp1;
char* p1 = (char*)vp1;

while (sz--) {
char temp = *p1;
*p1++ = *p2;
*p2++ = temp;
}
}


----------------------------

template (şablon) : derleyiciye kod yazdırmak için yazılan kod

aslında string diye sınıf yoktur. basic string adlı sınıf şablonundan 
elde edilen sınıf kodu vardır

-------------

template kategorileri :

-function template :derleyiciye fonksiyon kodu yazdırır
-class template : derleyiciye sınıf kodu yazdırır
-variable template : derleyiciye değişken tanımala kodu yazdırır
-alias template : derleyiciye tür eş bildirimi kodu yazdırır
-concept

--------------

specialization : vectore elemanları şnt olucak dinamik dizi
sınıfı yazdırdığımızda vector sınıfının int specialization'ı oluyor.

----------------------------------

template genel sentaksı
-----------------------


template <>

template parameters: template açısal parantex içinde tanıttığımız parametrelere denir
-type parameter : bu isim bir türe karşılık gelir 
-non-type paramter : bu isim sabite karşılık gelir, tür değil
-template parameter : //buna daha sonra değinilicek

----------------------

type parameter:

template <class T> //bu da kullanılır
template <typename T> //bu da kullanılır, 'T bir tür olmak üzere' anlamına gelir 


template <typename T, typename U> //bu şekilde olur
template <typename T, class U> //bu şekilde olur, bunu yapma okuyanı yanıltır
template <typename> //legal

--------------

template <typename T>
void func(T x, T u); //template bir türe karşılık gelir 

---------------

template <typename T, typename U> //iki farklı tür alabilir
class Myclass {

};

Myclass<int, double> //T yerine int, U yerine int

---------------------

non-type parametre: tür değil değer kullanılır

template <int N> //N bir değere karşılık gelir
class Myclass {

int a[N]
};

------------

#include <bitset>

template <std::size_t n>
class Bitset {

};

int main()
{
Bitset<32>
}

------------

template<typename T, int N>
void func(T(&)[N])
{

}

-------------

template <typename T, std::size_t N>

int main()
{
std::array<double, 20> //20 elemanlı double diziyi sarmalar
}

-------------

template <typename T, T x>
class Myclass {

};

//Myclass<int, 10> //bu açılımlar olabilir
//Myclass<long, 20L> /

---------------------

derleyicinin oluşturduğu specialization'da template parametrelerine
karşılık seçilicek, alınacak argümanların hangi gerçek türler ya da sabitler
olduğu derleyici tarafından belirlemenin birden fazla yolu vardır.

-----------

1-deduction
fonksiyon / sınıf şablonlarında(C++17)

------

2-explicit template argument: bu templatte bu türü kullanıcaksın

vector<int> //derleyiciye int kullanıcaksın demektir

---

int main()
{
using namespace std;
bitset<16> //16 sabitini kullan
}

---

int main()
{
using namespace std;

array<int, 20> //1 specialization oluşturmanı istiyorum
ama bu specialization'da 1. tür parametresi yerine int, 2. tür parametresi yerine 20 kullan
}

---

int main()
{
using namespace std;


make_unique<int>(12) //int türünü kullan
}

-------------

3. varsayılan argüman alması

vector<int> //normalde 2 parametresi vardır, 2. varsasyılan paramtere alır

int main()
{
using namespace std;

vector<int> x;
//vector<int, allocator<int>
}

-----------------





