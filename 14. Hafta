/////////////////////////////////////////////////1. Ders ////////////////////////////////////////////////////////

Lambda expression
-----------------

Deleyiciye sınıf tanıtan nesne

pr value expression

Derleyicinin lambda ifadesi karşılığında oluşturduğu sınıf türüne closure type denir

Oluşan nesnenin kendisine closure object

En çok kullanılan durumu stl algoritmasına argüman olarak yollamak


--------------
Genel Sentax

[] : lambda introducer, derleyici labda ifadesi ile karşılaştığını bununla anlar

[]() : derleyici yazdığı sınıfın fonksiyon çağrı operatör fonksiyonun parametre parantezi
[](int x){}

[]() {} : code yazılan kısım
[]() { // code}

----------------
class xyz23_87ds {
public:
void operator()()const
{

}
};

int main()
{
[]() {}(); //sentax hatası olmaz, hiçbir şey yapmaz
-----
xyz23_87ds{}() //aynı anlamda

}

-----------------
//aşağıdakiler gelebilir

[]() {//code}
[]()constexpr{//code}
[]()noexcept{//code}
[]()mutable{//code}
[]()-> type{//code}

--------------------

//parametre değişkeni yok ise () yazılmasa da olur

int main()
{
[] {};
}

--------------------
//eski cpp 'da niteleyicilerden biri var ise () kullanılmak zoruda idi

int main()
{
[]()mutable{};
}

//cpp 23 ile bu özellik gitti

-------------------

en basit kavramlardan başlıyoruz 

int main()
{
[](int x) {return x * x;}
}

---------------------

class xyz13981 {
public:
double operator()(int x)const
{
return x * x;
}
};

//aşağıda yazılan kodun karşılığı yukarıdaki koddur

int main()
{
[](int x) {return x * x * .5; } 
}

----------------

en fazla karşımıza çıkıcak durumlar:
isimlendirilmiş nesne kullanımı

/*class xyz13981 {
public:
double operator()(int x)const
{
return x * x;
}
};
*/

int main()
{
auto f = [](int x) {return x * x; };

std::cout << f(2) << "\n" << f(5) << '\n';
}

----------

hiç isimlendirmeden fonksiyon şablonuna argüman olarak göndermek

template <typename F>
void func(F f)
{
auto val = f(12);
}

int main()
{
func([](int x) {return x * x; });
}

----------------

#include "nutility.h"
#include <algorithm>
#include <vector>

int main()
{
using namespace std;

vector<string> svec;
rfill(svec, 100, rname);
print(svec); 

cout << 
count_if(svec.begin(), svec.end(), [](const string &s) {return s.lenght() == 7; })
}


/* //derleyiic bu şekilde yazar
class xyz_tamer_ {
public:
bool operator()(const std::string& s)const 
{
return s.lenght() == 7;
}
};
*/

---------------

int main()
{
using namespace std;

auto val = [](int x) {return x * x + 5; }(20); //fonksiyona çağrı olarak 20 değeri verildi
}

----------------

int main()
{
using namespace std;

auto x = [](int a, int b) {return a + b; }(4, 8); //a ve b'ye 4 ve 8 değeri verdik
}

----------------

labmda function içinde statik ömürlü nesneleri doğrudan isimleriyle kullanabiliriz.


int main()
{
int g = 5;

auto f = [](int a) {return a * g; }; //g isim aramadan dolayı hatalı olur, globalda bildirsek hata olmaz
}

----------------

int main()
{

auto iputc = [](int x) {
std::cout << x << '\n'; //cout global bir değişken olduğu için hata olmaz
};

iputc(35);
}

----------------
//derleyiciye bunu yazdırmak için capture clause denilen sentax oluşturulması gerekiyor

class bgrsrtts {
public:
bgrsrtts(int x) : mx(x) {}
int operator()(int a)const {
return a * mx;
}

private:
int mx;
};

-------------

int main()
{
int x = 10;
[x] //capture clouse, derleyicinin yazdığı sınıf elemanının bu türden olmasını istiyoruz kopyalama yapılmış oluyor
}

-----------

int main()
{
int x = 10;

auto f = [x]() {
++x; //illegal, x const olduğu için geçersizdir

}; 
}

-----------

int main()
{
int x = 35;

auto f = [x]()mutable { //x'in const üyeliği gider değiştirmek istendiği söylenir
++x;
};
}

-------------

int main()
{
using namespace std;

string str{"bugrahan serttas" };

auto f = [str]()mutable { //mutable kullanmassak hata olur
str[0] = 'T';
}
}

-------------
int g = 6;

int main()
{
using namespace std;

int x = 3, y = 5, z = 9;

auto f = [x, y, z, g](int a) { //hata olur g global olduğu için
return a * (x + y + z);
};
}

-------------

bütün değişkenleri capture etmenin kısa yolu aşağıdadır

int main()
{
using namespace std;

int x = 3, y = 5, z = 9;

auto f = [=](int a) {  // = koyulduğu zaman bütün değişkenler kullanılabilir
return a * (x + y + z);
};
}

----------

int main()
{
using namespace std;

int x = 6;

auto f = [x]()mutable {
x *= 10;
};
f();
cout << "x = " << x << '\n';

}

------------

class mxt_12 {
public:
mxt_12(int &r) : mr {r} {}
void operator()()const
{
mr++; //hata olmaz, veri eleamnı değştirilmiyor gösterdiği eleman değiştiriliyor
*ptr = 567; //hata değil
ptr = 8778; //hata
}
private:
int& mr;
};

int main()
{
using namespace std;

int a = 75;

mxt_12 f(a);

f();

cout << "a = " << a << '\n';
}

----------------

int main()
{
using namespace std;

int a = 67;

//a] //derleyici bana sınıf tanımla, sınıfın veri elemanını a ile init et demek
[&a]() //derleyici bana sınıf tanımla, sınıfın veri elemanını &a ile init et demek
{
++a;
};
cout << "a = " << a << '\n'; //67 olur
}

--------------

int main()
{
using namespace std;

int a = 67;
[&a]() {
++a;
}();

cout << "a = " << a << '\n'; //68 olur
}

--------------

int main()
{
using namespace std;

int a = 67;
int b = 23;
int c = 5;
double dx = 4.5;

auto f = [a, &b, &c]() {}; //bu şekilde capture edilebilir
auto f = [=]() {}; //hepsini copy olarka capture eder
auto f = [&]() {}; //hepsini &a, &b, &c, &dx olarak capture eder
auto f = [=, &dx]() {}; //dx hariç hepsini copy olarak capture eder dx &dx olarak
auto f = [&, a]() {}; //a hariç hepsi & olarak capture edilir
}

---------------

int main()
{
using namespace std;

auto f = [](int x)-> double { //çıkarım yapmaz direk geri dönüşü double yapar, trailing return type
return x * x;
};

auto ret = f(4);
}

---------------

int main()
{
using namespace std;

auto f = [](int x) {
if (x > 10) {
return x * x;
}
else {
return x * 5.6; //ambigidous dan dolayı hata var
//return x * 5; //legal
}
};

------------------

class Myclass {
public:
template <typename T>
void func(T)
{

}
};

int main()
{
Myclass m;

m.func(1);
m.func(1.1);
m.func(1.1f);
m.func('A');
}

-------------------

class Myclass {
public:
template <typename T>
void operator()(T) 
{

}
};

int main()
{
Myclass m;
m(12);
m(1.2);
m('A');
}

----------------

yukarıdaki şekilde lambda fonksyionu yazılabilir

class xyz_12 {
public:
template <typename T>
auto operator()(T x)
{
return x * x;
}
};

//derleyici yukarıdaki şekilde yazar, istediğimiz argümanla çağırabiliriz

int main()
{
auto f = [](auto x) {
return x + x;
};
}

------------

int main()
{
auto f = [](auto x) {
return x + x;
};
std::string name{"gurkan"};

auto a1 = f(12); //türü int değeri 24
auto a1 = f(3.5); //türü double değeri 7
auto a1 = f(name); //türü string değeri gurkangurkan
}

-------------

labmda ile ilgili ilginç birkaç özellik ile devam ediyoruz

int main()
{
auto f1 = []() {};
auto f2 = []() {};

//compile time'da f1 ve f2 türünün aynı olup olmadığı <type_traits> is_same ile bakılır

constexpr bool b = std::is_same_v<decltype(f1), decltype(f2)>;

std::cout << typeid(f1).name() << '\n';
std::cout << typeid(f2).name() << '\n';

}

----------------

int main()
{
auto f1 = []() {};

auto f2 = f1; //legal, aynı türdendir copy ile hayata geldi
}

-----------------

int main()
{
auto f1 = []() {};
decltype(f1) f2; //cpp 20 öncesi hata 
}


stateless labmda : durumu olmayan 

---------------

int main()
{
auto f1 = []() {};
auto f2 = f1;

f1 = f2; //delete edilmiş çağrıya atama yapılıyor hata, cpp 20 sonrası legal
}

---------------

int main()
{
auto f = []() {};

decltype(f) f2;

f = f2; 
//cpp 20 ile yukarıdaki kodlarda hata olmaz
}

---------------

int main()
{
auto f = [](int x) {return x * x; };

int (*fptr)(int) = f;
}

-------------
işaret operatörü + önemi

//positive lambda

int main()
{

auto x = +[](int a) {return a * a; };

std::cout << typeid(x).name() << '\n';
}


--------------

class Myclass {

public:

};

int main()
{
Myclass m;
+m; //geçersiz
}

--------------

class Myclass {

public:
operator int()const
};

int main()
{
Myclass m;
+m; //geçerli
}

---------------

class Myclass {

public:
using fptr = double(*)(double);
operator fptr()const
};

int main()
{
Myclass m;
+m; //geçerli, 12. satır sayesinde
}

//lambdaların bu şekilde function pointer türüne dönüşüm yapan özelliği var
---------------
positive lamda : function pointer type yapar


eğer function pointer type ifadesi oluşturmak istiyorsak ve elimizde statıs lamda var ise
onu işaret operatörü + nın operanıd yapmak

int main()
{
// [](int a) {return a * a;}; //closure type
auto x = +[](int a) {return a * a;}; //function pointer türüne dönüştürdü

std::cout << typeid(x).name() << '\n';

}

-------------

template <typename F>
void foo(F x)
{
std::cout << typeid(x).name() << '\n';
}

int main()
{
foo(+[](int a) {return a * a; }); //function pointer type oldu
}

-----------------

noexcept
--------

[]()noexcept{code}; //exception throw etmememe garantisini istiyorsak bunu kullanıcağız

int main()
{
auto f = [](int x) noexcept{return x * x; }; //exception göndermeme garantisi veriyor
 
auto f = [](int x) noexcept{return x * x; }; //exception gönderebilir

noexcept(f(12))
}

-----------------

//constexpr olmasını engelliycek bir durum olmadığı sürece constexpr kabul ediliyor

int main()
{
auto f = [](int x) {return x * x + 5; }; //constexpr, engelliycek bir durum yok
constexpr auto val = f(5);
}

---------------

int main()
{
auto f = [](int x) {
static int ival = 15;
return x * x + 5; };

constexpr auto val = f(5); //hata constexpr içinde sttaic olamaz, global olamaz, f(5) sabit değil
auto val = f(5); // legal olurdu
}

-------------

int main()
{
auto f = [](int x) constexpr {static int y{};
return x + y;};
}

-------------
c++ 20 ile gelen bir özellik

template <typename T>
class Myclass {

};

int main()
{
auto f = [](int x) {return x * x; };

Myclass<decltype(f)> m1;

std::cout << sizeof(decltype(f));
}

-------------

template <typename T>
class Myclass {

};

int main()
{
sizeof(decltype([](int x) {return x * x; })) //cpp 17 ye kadar hataydı
}

------------

template <typename T>
class Myclass {

};

int main()
{
Myclass<decltype([] {}) > m1;
}


-------------
//non-type paramlarda cpp 20 de deverimsel nitelikte yenilikler geldi

template <auto x> //non-type param
class Myclass {

};

int main()
{

}

-----------
//artık gerçek sayı türleri non-type parametreye argüman olabiliyor

template <auto x> //auto non-type param olduğunu gösterir
class Myclass {

};

int main()
{
Myclass < [] {} > m; //
}

-------------

template <auto x = []{}> //non-type param ve default template argümanı
struct class Myclass {
inline static int ival = 5;
};

int main()
{
Myclass<> m1; 

m1.ival++;
m1.ival++;
m1.ival++;

Myclass<> m2;

std::cout << m1.ival << '\n'; //her bir lambda ifadesi farklı bir tür oluşturuyor bu yüzden m1 ve m2 aynı değil
std::cout << m2.ival << '\n';
}

---------------

int main()
{
int a = 5;
int b = 4;
std::string str{"alican"}

const int x = [=](int x) { //bu şekilde basit bir şekilde yapılabilir işelmler lambda kullanrak
//code
return a * b - 3 + x;
}(12);

--------------

int main()
{
using namespace std;

vector<int> ivec;
rfill(ivec, 30, Irand{-1000, 1000});
print(ivec);

sort(ivec.begin(), ivec.end(), [](int a, int b) {
return abs(a) < abs(b);
});

print(ivec);
}



