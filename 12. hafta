//////////////////////////////////////////////////1. Ders//////////////////////////////////////////

template tekrarı...

variadic template:

template <typename ...Ts> //template parameter pack
template <int ...Vals>

------------------------------------

int main()
{
using namespace std;

bitset<32> //template argümanının 32 olmasını istiyoruz
}

-----------

template <typename T, typename U = int>
class Myclass {

};

int main()
{
Myclass<double, long>
}

-----------

!! template tanımları başlık dosyalarında yapılamaz
cpp dosyasında her şey gerçekleşir

!! template kod gizlenemez

---------

template <typename T>
class Neco;

template <typename T, typename U>
void foo(T, U);

#include "bugra.hpp" //burada tanım ile içeriği birbirinden gizlemek için
böyle bir hile kullanılabilinir

-------------------------------------------------------------

fonkksiyon template (fonksiyon şablonu): derleyicinin fonksiyon kodu yazmasını sağlayan kod kalıbı 
----------------------------------------

template <typename T>
void foo(T x)
{
T y{};
T* p = &y;
T** ptr = &p;
}

------

template <typename T>
void foo(int x, int y); //bu şekilde olabilir template kullanmak zorundna değiliz

------

template <typename T>
void foo(T x, int y) //bu şekilde de olabilir
{

}

------

template <typename T>
void foo() //bu şekilde de olur tür kullanılmak zorunda değil
{

}

int main()
{
foo<int>();
}

------------------------------------------------

template argument deduction : 
-----------------------------

derleyici bir şablon söz konusu olduğunda bu şablondaki 
template parametreleri karşılığı instanci yapmak için hangi template argümanlarını kullanıcağını
koda bakarak anlıycak


!! auto ile template argument arasında 1 istisna dışında fark yoktur

-------

int main()
{
auto x = 10;

foo(10);
}

------

auto haşağıdaki şekillerde olabiliyordu

auto x = expr;
auto& x = expr;
auto && y = expr;

------
istisna :

#include <initializer_list>

int main()
{
auto x = {1, 2, 3, 4, 5};
}

--------
#include <initializer_list>

template <typename T>
void foo(T) 
{

}

int main()
{
foo({1, 2, 3, 4, 5}); //tek fark burasısıdr hata verir
}

--------

template <typename T>
void foo(T) 
{

}

int main()
{
const int ival = 4;
foo(ival); T çıkarımı int ival, const düşer
}

---------

template <typename T>
void foo(T) 
{

}

int main()
{
int y{};
int& r = y;

foo(r); //T için yapılan çıkarım int
}

-------

template <typename T>
void foo(T) 
{

}

int main()
{
int y{};
const int& r = y;

foo(r); //T için yapılan çıkarım int
}

-------

template <typename T>
void foo(T) 
{

}

int main()
{
int a[5]{}

foo(a); //int için yaplan çıkarım int*
}

-------

template <typename T>
void foo(T) 
{

}

int main()
{
const int a[5]{}

foo(a); //int için yaplan çıkarım const int*
}

--------

template <typename T>
void foo(T) 
{

}

int bar(int);

int main()
{

foo(bar); //int (*)(int), function pointer type

}
//Bu söylenenlerin hepsi auto içinde geçerli

--------

template <typename T>
void foo(T) 
{

}

int main()
{
foo("bugrahan"); //const char*
}

------------------

!! Aşağıdaki yapı ile derleyicinin bize verdiği hata mesajı ile
türünü bulabiliriz

template <typename T>
class TypeTeller;

template <typename T>
void foo(T) 
{
TypeTeller<T> x;
}

int main()
{
const int x{}
foo(x); //x türü bulunur 
foo("bugrahan"); 
}

---------------------

deduction her zaman başarılı olmak zorunda değil 
fonksiyon argümanında gönderilen argüman olduğu zaman çıkarımın yapılamaması

template <typename T> 
void foo();

int main()
{
foo();
}

---------

template <typename T> 
void foo(int, int);

int main()
{
foo(12, 56); //hata
}

---------

template <typename T> 
void foo(T, T);

int main()
{
foo(12, 56); //legal
foo(12, 5.8); //ambigidious hata
}

---------

template <typename T, typename U> 
void foo(T, U);

int main()
{
foo(12, 5.8); //legal
}


--------

template <typename T> 
void foo(T, T);

int main()
{
int a[10]{};
int b[234]{};
foo(a, b); //legal
}

-------

template <typename T> 
void foo(T, T);

int main()
{
int a[10]{};
double b[234]{};
foo(a, b); //hata 
}

-------

template <typename T> 
void foo(T, T);

int main()
{
foo("bugrahan", "serttas"); //legal
}

------------------

template <typename T>
class TypeTeller;

template <typename T>
void foo(T&) 
{
TypeTeller<T> x;
}

int main()
{
int x = 10;
foo(x); //t iiçin yapılan int ama fonksiyon parametresi t&
}

------------

template <typename T>
class TypeTeller;

template <typename T>
void foo(T&) 
{
TypeTeller<T> x;
}

int main()
{
const int x = 10; //const int
foo(x); 
}

---------------

template <typename T>
class TypeTeller;

template <typename T>
void foo(T&) 
{
TypeTeller<T> x;
}

int main()
{
int a[4]{};
foo(a); //int(&)[4]
}

---------------

template <typename T>
class TypeTeller;

template <typename T>
void foo(T&) 
{
TypeTeller<T> x;
}

int main()
{
const int a[4]{};
foo(a); 
}

----------------
//mülakatta sorulan bir soru

template <typename>
class TypeTeller;

template <typename T>
void foo(T&, T&) 
{

}

int main()
{
foo("can", "eda"); //legal, const char[4], const char[4]
foo("naci", "cemal"); //hata ,const char[5], const char[6]
}

-----------------

template <typename>
class TypeTeller;

template <typename T>
void foo(T&, T) 
{

}

int main()
{
int a[5]{};
foo(a, a); //illegal
}

--------------------

template <typename>
class TypeTeller;

template <typename T>
void foo(T&) 
{
TypeTeller<T> x;
}

int bar(int);

int main()
{
foo(bar); //int(int)
}

--------------------

zor olan kısıma geçiruz, programcıların en çok karıştırdığı kısım

template <typename T>
void func(T &&) //universal referans  /std ==> forwarding reference
{
//bu fonksiyona yapılan bütün çağrılarla yapılan çağrılar legaldir

}

-------

class Myclass{};

void func(Myclass &&) //R value
{

}

-----------

template <typename T>
void func(T &&) 
{

}

int main()
{
int x = 10;
const double dval = 4.5;

func(x); //legal
func(45); //legal
func(dval); //legal
}

--------------

template <typename T>
void func(T &&) //Nec&, refernas collapsing. ile ilgili
{

}

class Nec{};

int main()
{
Nec mynec;
func(mynec);
}

--------------

class Nec{};

using refref = Nec&&;

int main()
{
Nec mynec;
refref& r = Nec{} //nec&
refref&& r = Nec{} //nec&&

}

-------------

template <typename>
class TypeTeller;

template <typename T>
void func(T &&) // T ==> Myclass
{
TypeTeller<T> x;
}

class Myclass {};

int main()
{
func(Myclass{});
}

--------------
!! 
template <typename T>
void func(T&&)
{
//L value gönderirsek fonksiyon parametre değişkeni L value
//R value gönderirsek fonksiyon parametre değişkeni R value
}

-------------

template <typename T>
void func(T&& x)
{

}

int main()
{
const int x{};
func(x);
}

--------------

int main()
{
int x = 5;
auto&& r = x;
}

-------------

tür çıkarımı hakkında konuşmaya devam ediyoruz

template <typename T, int N>
void func(T(&r)[N])
{

}

int main()
{
int a[20]{};
double b[10]{};

func(a); //func<int, 20>(a);
func(b); //func<double, 10>(b);
func("bugra"); 
}


--------------

zor bir örnek

template <typename>
class TypeTeller;

template <typename T, typename U> //T için int, U için double çıkarımı yapılır
void func(T (*)(U)) //int (*)(double)
{

}

int foo(double);

int main()
{
func(foo);  
}

-----------------------

fonksiyon çağrısı deduction için tek yol değildir
fonksiyonun adresini alarakta yapabiliriz

template <typename T>
void func(T)
{

}

int main()
{
void (*fp1)(int) = func;
void (*fp1)(double) = func;
}

----------------

template <typename T>
void foo(T*);

template <typename T>
void func(T x)
{
foo(&x);
}

int main()
{
func(12);
}

---------------

stl en çok kullanılan fonksyion şablonu, swap

template <typename T>
void Swap(T& t1, T& t2)
{
T temp{std::move(t1)}
t1 = std::move(t2);
t2 = std::move(t1);
}

------
#include <utility>

int main()
{
int x = 24;
int y = 45;

std::swap(x, y);
std::cout << "x = " << x << '\n';
std::cout << "y = " << y << '\n';
}

-----

#include <utility>

int main()
{
std::string s1{"bugrahan"};
std::string s1{"serttas"};

std::swap(s1, s2);
std::cout << s1 << " " << s2 << "\n";
}

-------------

template <typename F>
void func(F f)
{
auto val = f(12);
std::cout << "val = " << val << "\n";
}

int foo(int x)
{
std::cout << "foo cagrildi x = " << x << "\n";
return x * x;
}

int main()
{
func(foo);
}

-------------

template <typename F>
void func(Fn f)
{
auto val = f(12);
std::cout << "val = " << val << "\n";
}

class Nec {
public:
int operator()(int x)const
{
std::cout << "Nec::operator()(int x) x = " << x << '\n';
return x * x * x;
}
};

int main()
{
func(Nec{});
}

--------------

C++ 20 ile geldi, kısaltılmış template standartı

template <typename T>
void func(T x)
{

}

//yukarıdaki, aşağıdaki şekilde yazılabilir, çok sık kullanılıyor

void func(auto x)
{

}

------

template <typename T, typename U>
void func(T x, U y)
{

}

//

void func(auto x, auto y)
{

}

----------------------

c++ 11 ile 

// trailing return type
// auto return type
geldi 


trailing return type: normal main ile aynı anlamda aşağıdakini kullanmanın bir manası yok
---------------------
auto main() -> int
{

}


işe yaradığı yerler

int (*foo(())(int) //geri dönüş değeri türü int(*) (int)
{

}

----

int bar(int);

auto foo() -> int(*)(int)
{
return bar;
}

----

template <typename T, typename U>
auto sum(T x, U y) -> decltype(x + y) //ok'un sağında parametre değişkenlerini kullanabiliyoruz
{

}

-----------

auto return type : fonksiyonun geri dönüş değeri türünün return ifadesinden yapılması demektir

auto foo(int x)
{
return x * 1.3; //geri dönüş değeri double
}

----

auto foo(int x)
{
if (x > 10)
return 1;

return 2.3; //hata
}

-----

template <typename T>
auto foo(T x)
{

return x.bar();
}

----------------------

fonksiyon şablonu sınıfın üye fonksiyonu da olabilir

class Myclass {
public:
void foo(int);

template <typename T>
//void bar(auto x) //c++20 ile bu şekilde yazılabilinir
void bar(T x)
{

}
};

int main()
{
Myclass m;

m.bar(12); //derleyici int parametreli fonksiyon yazar
m.bar(1.2); //derleyici double parametreli fonksiyon yazar
m.bar("ali"); //derleyici const char* parametreli fonksiyon yazar
}

-----------

template <class T> //bu şekilde yazılamıycağı bir senayo vardır

class Myclass {
public:
using value_type = int;
};

template <class T>
void func(T x)
{
typename T::value_type y{};
}

----------

template <typename R, typename T, typename U> //geri dçnüş değerini template yapabilriiz (R)
R sum(const T& x, const U& y)
{
return x + y; 
}

int main()
{
sum<double>(12, 4.5); //bu şekilde olabilir

int x = 45;
float f = 3.4;
sum<double>(x, f); //bu şekilde de olabilir

auto val = sum<double>(x, f);
}

----------
#include <typeinfo>

template <typename T>
void func(T)
{
std::cout << typeid(T).name << "\n";
}

int main()
{
func(12.4); //her farklı argüman için farklı bir speciliation yazıcak
func(12.4f);
func(12);
func('A');

func<double>('A'); //Bu şekilde double olarak döndürür
}

---------------

fonksiyon şablonları aynı isimli başka fonksiyon şablonları ile aynı isimli bulunabilir 
yani bir fonksiyon şablonu ile bir fonksiyon aynı isimde ise birbirini overload ederler

--------

template <typename T>
void func(T)
{
std::cout << "function template: " << typeid(T).name() << "\n";
}

void func(int x)
{
std::cout << "harbi fonksiyon\n";
}

//void func(int) //bu çağrılır, exact match
//void func<int>(int) 

int main()
{
func(13);
}

---------------

eski bir mülakat sorusu,
öyle bir kod yaz ki int argüman ile cagrilması zorunlu

template <typename T>
void func(T) = delete;

void func(int);

int main()
{
func(12);
}

-------------

birden fazla fonksiyon şablonu da bir arada bulunabilir, overloading

template <typename T>
void func(T x)
{

}

template <typename T>
void func(T x, T y)
{

}

template <typename T>
void func(T *p)
{

}

-------------
partial ordering rules : daha spesifik daha fazla nitelenmiş parametreye sahip
template seçilir, (kısa bir değindi konu daha detaylı)

template <typename T>
void func(T x)
{
std::cout << "T x\n";
}

template <typename T>
void func(T *p)
{
std::cout << "T* p\n";
}

int main()
{
int x = 10;
func(&x);
}
------------

explicit template : açısal parantez içine yazılana denir. //void func<int>(int) 
 
////////////////////////////////////////////////////2. Ders///////////////////////////////////////////////////

sınıf şablonları (template)
----------------------------

----------

template paeamteresi birden fazla olabilir, parametreler type, non-type, template parametre olabilir
bunların paket hali olabilir

template <typename T>

template <int x> //non-type

template <std::size_t x>

-----------
//Bu bir sınıf değildir, class templatedir
derleyici için bir sınıfın kodunun nasıl yazılabiliceğini gösteren bir meta koddur

template <typename T>
class Myclass {

};

int main()
{
Myclass<int>
Myclass<double>

}

-----------

template <typename T>
class Myclass {

};

template <typename T>
class Nec {

};

int main()
{
Nec<Myclass<int>>

}

-------------

template <typename T>
class Myclass {

};

int main()
{
Myclass<Myclass<Myclass<int>>> //modern cpp öncesi >> maximul munc kuralına takılırdı
}

------------

int main()
{
using namespace std;

vector<int> //vectörün int açılımı, öğeleri int türden olan specializtanı temsil ediyor
vector<vector><int>> //elemanları int vector olucak
vector<vector<vector<int>> //elemanları int vector vector olucak
}

-------------

template <typename T>
class Myclass {

};

int main()
{
Myclass<int> x; //bu yapıların hepsi olabilir
Myclass<int>* p{ &x };
Myclass<int>&r{ x };
}

--------------

template <typename T>
class Myclass {

};

void foo(const std::vector<int>&);
std::vector<double> bar();
//foo geri dönüş değeri double türden elemanlar tutucak bir dinamik dizi döndürür 

-------------
//en tipik hatalar...

template <typename>
class Myclass{

};

int main()
{
Myclass<double> dm;
Myclass<int> im;
//dm ile im türü farklıdır

dm = im; //Hata olur, Myclass<int> türden Myclass<double> türüne dönüşüm olmaz
}

-------------

template <typename>
class Myclass{

};

int main()
{
Myclass<5> x;
Myclass<6> y;

y = x; //hata, ayrı ayrı sınıflardır dönüşüm olmaz
}

---------------

int main()
{
using namespace std;

vector<double> dvec(100);
vector<int> ivec(100);

dvec = ivec; //hata 
}

------------------

template <typename T>
class Myclass {
public:
void foo(T x)
{
++x;
}
};

class Nec {};

int main()
{
Myclass<Nec> mynec; //hata olmaz, ++x çağrılmadı

mynec.foo(mynec)
}

--------------

template <typename T>
class Myclass {

public:
void foo(T x)
{
++x;
}
};

class Nec {};

int main()
{
Myclass<Nec> m;
Nec mynec;

m.foo(mynec); //hata olur
}

------------

yukarıdaki durumun avantajları vardır boş yere fonksiyon çağırmamış oluruz

------------

//myclass.h

template <typename T>
class Myclass {

public:
T bar(T);
void foo(T x)
{
x.f();
++x;
x = 0;
}
};

//myclass.hpp
#include "myclass.h"


----------------

üye fonksiyonun tanımını görmek zorundadır

template <typename T>
class Myclass {

public:
void foo(T x)
{
x.foo();
++x;
x = 0;
}
};

template <typename T>
T Myclass<T>::foo(T x) //hata
{

}

-----------
//myclass.h

template <typename T, typename U>
class Myclass {

public:
void foo(int); //
};

template <typename T, typename U>
void Myclass<T, U>::foo(int cx) //foo class dışında bu şekilde tanımlanır
{

}
-------------
//myclass.h
//tanımları bu şekilde olucak

template <typename T>
class Myclass {

public:
void foo(T);
void bar(T, T);
void baz(int);

};

template <typename T>
void Myclass<T>::foo(T)
{

}

template <typename T>
void Myclass<T>::bar(T, T)
{

}

template <typename T>
void Myclass<T>::baz(int)
{

}

-------------
fonksiyon şablonları ile sınıf şablonları birlikte kullanılacak çoğu zaman

template <typename T>
class Myclass {

};

template <typename T>
void func(Myclass<T>&);

int main()
{
Myclass<int> x;
func(x);
}

--------------

template <typename T>
class Myclass {

};

template <typename T>
bool operator==(const Myclass<int>&, const Myclass<int>&)
{

return true;
}

---------------

2 tane vectorü toplıycak kod

template <typename T>
class Myclass {

};

template <typename T>
std::vector<T> operator+(const std::vector<T>&, const std::vector<T>&)
{

return {};
}

-----------------

//en çok karşımıza çıkan durumlardan bir tanesi
//sınıf şablonlarının üye fonksiyonlarında yine sınıf şablonu olması

//mülakatlarda necati hocanın çok sorduğu birkaç soru

template <typename T>
class Myclass {

public:
void foo(T&&); //universel referans tür çıkarımı olduğu zamandır
};

int main()
{
Myclass<int> m; 

m.foo(12);
}

--------------

class Myclass {
public:

template <typename T>
void func(T x); //member template  
};

//yukarıdaki yapı bize aşağıdakini sağlar
//bir sınıfın üye fonksiyonu template olabilir

int main()
{
Myclass m;

m.func(1); 
m.func(1.3);
m.func<float>(1);
}

-------------

class Myclass {
public:

template <typename T>
bool operator()(T)const; //her farklı argüman için
};

int main()
{
Myclass m;

m(12);
m.operator()(12);
m(1.2);
}

-------------
//sınıfın özel fonksiyonları bile template olabilir

class Myclass {
public:
template <typename T>
explicit Myclass(T);
};

int main()
{
Myclass m1(12);
Myclass m2(1.2);

}

-------------

templatelere geliyoruz

template <typename T>
class Nec {

public:
void func()
{
Nec x; //Nec'in scobunda bunu yazmakla aşağıdakini yazmak aynı anlamdadır
Nec<T> x;
}
};

int main()
{

}

-------------

template <typename T>
class Nec {

public:
Nec func(Nec x) //Nec<T> func(Nec<T> x), aynı anlamdadır
{
return x;
}
};

-----------

template <typename T>
class Nec {

public:
Nec func(Nec x)
{
Nec<T*> x;
}
};


-----------

//sınıfın dışında bildirirsek

template <typename T>
class Nec {
public:
Nec func(Nec x);
};

template <typename T>
Nec<T>::func(Nec<T> x)
{
Nec y{ x }; //bu şekilde tanımlayabiliriz
return y;
}

-----------

template <typename T>
class Nec {

public:
Nec func(Nec x); //burasıda template yapılabilinir aşağıda ki örnekte gösterdim
};

int main()
{
Nec<double> x;
Nec<int> y;

x.func(y); //Hata, nec'in açılımından double dönüşüm var
}

-------------

//bir template'in farklı speciliationları için 
kod yazmak istiyorsak member template olmalıdır

template <typename T>
class Nec {

public:
template <typename U>
Nec func(Nec<U> x)
{
std::cout << typeid(*this).name() << "\n";
std::cout << typeid(x).name() << "\n";
}
};

int main()
{
Nec<int> x;
Nec<double> y;

x.func(y);
}

--------------
#include <utility>

std::pair //2 tane farklı türden öğeyi paketliyor

--------------

öyle yerler vardır ki 2 tane farklı veya aynı türden öğeyi
bir arada tutmak isteriz 

//basitleştirilmiş hali

template <typename T, typename U>
struct Pair {

T first;
U second;

};

Pair<int, double> 

-------------

std::pair<int, double> foo(); //bir int birde double döndürülür

int main()
{
auto p = foo();
p.first; //ilk öğeye erişir
p.second; //ikinci öğeye erişir
}


-------------

std::pair<int, double> foo();

int main()
{
using namespace std;

pair<double, double> pd{2.3, 5.6};
pair<int, int> pi{12, 23};

pd = pi;
}

--------------

int main()
{
using namespace std;

pair<int, string> x{4, 5.6};

cout << "x.first = " << x.first << '\n';
cout << "x.second = " << x.second << '\n';
}

---------------
pair kullanarak kod yazıyoruz...


int main()
{
using namespace std;

pair<int, double> px{3, 6.7};

cout << px; //hata
}

-----------

std::ostream& operator<<(std::ostream& os, std::pair<int, double>& p)
{
return os << '[' << p.first << ", " << p.second << ']';
}

int main()
{
using namespace std;

pair<int, double> px{3, 6.7};

cout << px; 
}

--------------

template <typename T, typename U>
std::ostream& operator<<(std::ostream& os, const std::pair<T, U>& p)
{
return os << '[' << p.first <<", " << p.second << ']';
}

int main()
{
using namespace std;
pair<string, double> p1{ "tamer dundar", 6.7};
pair<int, char> p2{862, 'A'};

cout << p1 << " " << p2 << '\n';

}

-------------

template <typename T, typename U>
std::ostream& operator<<(std::ostream& os, const std::pair<T, U>& p)
{
return os << '[' << p.first <<", " << p.second << ']';
}

int main()
{
using namespace std;
pair p1{2, 6.7};
pair<string, string> p2("furkan", "emrecan");

pair <pair<int, double>, pair<string, string>> p3{p1, p2};
cout << p3 << "\n";

}

----------------

bir idiyomatik yapıya daha bakıyoruz

template <typename T>
std::pair<T, U> MakePair(const T& t, const U& u)
{
return std::pair<T, U>(t, u);
}

int main()
{
auto p = MakePair(12, 5.6); //geri dönüş değeri std::pair(int, double)
}

------------------

template <typename T, typename U>
std::ostream& operator<<(std::ostream& os, std::pair<int, double>& p)
{
return os << '[' << p.first << ", " << p.second << ']';
}

int main()
{
using namespace std;
std::string s1{"melike"}, s2{"bilge"};
cout << make_pair(make_pair(2, 5.6), make_pair(s1, s2)) << '\n';
}

------------------
//c++ 20 öncesinde non-type parametrelere karşılık gelen argümanlar 
aşağıdakiler olabiliyordu

a) tam sayi türleri
b) enum türleri
c) object pointer  / referasn türleri
d) function pointer türleri
e) member function pointer türleri

template <double dval> //c++ 20 öncesi hatalı idi
class Myclass {

};

//c++20 ile gerçek sayı türleri non-type parametre olarak kullanılabiliyor
bazı sınıf türleri de kullanılabiliyor

-------------------

template <double dval>
class Myclass {

};

int main()
{
Myclass<12.5> x; //cpp 20 öncesinde hatalı bir koddu
}

----------

template <int *p>
class Myclass {

};

int g{ 24 };

int main()
{
Myclass<&g> m1;
}

---------

template <int &r>
class Myclass {

};

int g{ 24 };

int main()
{
Myclass<g> m1; //r'nin kullanıldığı yerlerde g değişkenine ref. olucak 
}

-----------

fonksiyon adresi olabilir

template <int (*fp)(int)>
class Myclass {

};
int foo(int);

int main()
{
Myclass<&foo> m;
}

--------------------

template <typename T, T x> //bu yapının kısaltılmış hali vardır
class Myclass {

};

int main()
{
Myclass<int, 5>
}

------

template <auto n>
class Myclass {

};

int main()
{
Myclass<5> m1;
Myclass<1u> m2;
Myclass<'A'> m2;
}

-----------------------------------

templateler ile ilgili başka bir araca bakıyoruz

templateler ile ilgili başka hangi önemli özellikleri 
ve hangi terimleri bilmemiz gerekiyor

!! template argümanlarının ne olduğunun bilinmesi için yollar şunlardır

-deduction (çıkarım)
-explicit template argument
-default template argument

default template argument :
---------------------------

!! modern c++ öncesinde default template argument  
yalnızca sınıflar için kullanılabiliyordu
ancak modern c++ da fonksiyon şablonları içinde 
varsayılan template argümanı kullanma olanağı getirildi

-------------

template <typename t = int>
class Myclass {

};

int main()
{
Myclass<double> m1;
Myclass<> m1; // içi boş olduğu için int olur

std::cout << typeid(m2).name();

}

----------

template <typename T = int, typename U = double>
class Myclass {};

int main()
{
Myclass<int> m1;
Myclass<> m2;
Myclass<long, long> m2;
}

-----------

template <typename T>
class Nec {

};

template <typename T = int, typename U = Nec<T>>
class Myclass {};

int main()
{
Myclass<double> m1; 
std::cout << typeid(m1).name << '\n';
}

------------

//stl kütüphaneleri hep varsayılan argüman alır

template <typename T, typename A = std::allocator<T>>
class Vector {

};

int main()
{
Vector<int> ivec;
}

-----------

int main()
{
using namespace std;

vector<int> ivec;
std::cout << typeid(ivec).name();
}

----------

int main()
{
using namespace std;

set<int> x;

set<int, less<int>, allocator<int>> x2; //2. ve 3. varsayılan argüman alır
}


-----------

int main()
{
using namespace std;

set<int> x;

std::cout << typeid(x).name();
}

-----------

template <int x = 10, int y = 20>
class Myclass {

};

int main()
{
Myclass<3, 5> m1;
Myclass<3> m2;
Myclass<> m3;
}

-------------

fonksiyon şablonları ile ilgili fonksiyon yazıyoruz

mülakatlardaki sorulan temel bir soru

c dilinde bu şekilde yazılırdı

int main()
{
int a[]{1, 4, 7, 8;

constexpr auto size = sizeof(a) / sizeof(*a);
}

-------------

c++ dilinde bu şekilde yazılır

template <typename T, std::size_t N> //1. parametresi type 2. parametresi non-type
constexpr auto asize(const T(&)[N])
{
return N;
}

int main()
{
int a[]{1, 4, 7 ,8};

constexpr auto size = asize(a);
}

-----------

//sadece boyutu belli bir dizinin elemanlarını yazdırabiliriz

void print_array(const int* p std::size_t size)
{
for (size_t i = 0; i < size; ++i)
printf("%d", p[i]);

printf("\n");
}

int main()
{
int a[] = {3, 6, 1, 2, 9};
print_array(a, 5);
}

---------

c++'da bu kodu aşağıdaki şekilde yazarız

template <typename T, std::size_t N>
void print_array(const T(&P)[N])
{
for (size_t i = 0; i < size; ++i)
printf("%d", p[i]);

printf("\n"),
}

int main()
{
int a[] = {3, 6, 1, 2, 9};
print_array(a); //derleyici compile time'da dizinin boyutunu anlar, c de bunu yapamayız
}

------------------------------

specialization : bir template'den oluşturulan kodun kendisi

sınıf ve fonksiyon şablonları ile ilgili önemli 
kurallardan bazıları

a) explicit specialization (full specialization)
b) partial specialization

explicit specialization ve partial specialization derleyiciye derleyicinin oluşturacağı specialization'ın kodunu vermemiz demektir

----------

explicit specialization sentaxı :

template <typename T>
class Nec {
public:
Nec()
{
std::cout << "primary template type T is :"
<<typeid(T).name() << '\n';
}
};


int main()
{
Nec<int> n1;
Nec<double> n1;
Nec<int*> n3;
Nec<Nec<float>> n4;
}

---------------

template <typename T>
class Nec {
public:
Nec()
{
std::cout << "primary template type T is :"
<<typeid(T).name() << '\n';
}
};

//explicit specialization
//full specialization
template <> //diamond denir buna, derleyiciye normalde primary kullanıcaksın ama int için bu kodu kullanıcaksın denir
class Nec<int> {
public:
Nec()
{
std::cout << "explicit specialization for Nec<int>\n"; 
}
};

int main()
{
Nec<int> n1;
Nec<double> n1;
Nec<int*> n3;
Nec<Nec<float>> n4;
}

-----------

template <typename T>
class Nec {
public:
Nec()
{
std::cout << "primary template type T is :"
<<typeid(T).name() << '\n';
}
void foo();
void bar();

};

template <> 
class Nec<int> {
public:
Nec()
{
std::cout << "explicit specialization for Nec<int>\n"; 
}

void f1();
void f2();
};

int main()
{
Nec<int> n1;

n1.f1();
n1.f2();
n1.foo()//yoktur
Nec<double> n2;
n2.foo();
n2.bar();
}

--------------------

template <typename>
class Myclass;

int main()
{
Myclass<int> x; //sınıf tanımı yok haatsı verir
}

---------

template <typename>
class Myclass;

template <>
class Myclass<int> {

};

template <>
class Myclass<double> {

};

int main()
{
Myclass<int> m1;
Myclass<double> m2 ;
}

-------------
#include <string>

template <typename T>
T Max(T x, T y)
{
return x > y ? x : y;
}

int main()
{
int i1{78}, i2{34};
std::cout << Max(i1, i2) << '\n';
std::cout << Max(2.3, 9.6) << '\n';

std::string s1{ "bilge" }, s2{ "damla" };
std::cout << Max(s1, s2) << '\n';


}

------------

#include <string>

template <typename T>
T Max(T x, T y)
{
return x > y ? x : y;
}

int main()
{
char s1[] = "ayla";
char s2[] = "kerim";

std::cout << Max(s1, s2) << '\n'; //bu kod yanlıştır çünkü adresler karşılaştırılır
std::cout << Max(s2, s1) << '\n'; // //büyük olan adresi döndürğr
//char * ve const char* için doğru çalışmaz
}

---------------
#include <cstring>

template <typename T>
T Max(T x, T y)
{
return x > y ? x : y;
}

template <>
char* Max<char*>(char* p1, char* p2)
{
return strcmp(p1, p2) > 0 ? p1 : p2;
}

int main()
{
char s1[] = "ayla";
char s2[] = "kerim";

auto x = Max(s1, s2);
}


//////////////////////////////////////////////// 3. Ders /////////////////////////////////////////////////

//mülakatlarda sorulan çok tipik bir soru

template<typename T> //primary template
void func(T)
{
std::cout << 1;
}

template<> //explicit speciliation
void func(int*)
{
std::cout << 2;
}

template<typename T> //başka bir fonksiyon şablonu
void func(T*)
{
std::cout << 3;
}

int main()
{
int* p = nullptr;
func(p); //3 çalışır, 2. function overloading resolution a girmez
}

-----------

template<typename T> 
void func(T)
{
std::cout << 1;
}

template<typename T>
void func(T*)
{
std::cout << 2;
}

template<> 
void func(int *)
{
std::cout << 3;
}

int main()
{
int* p = nullptr;
func(p); //2. seçilir 2.,  3. yü seçer
}

------------

template<typename T> 
void func(T)
{
std::cout << 1;
}

template<>
void func(int*)
{
std::cout << 2;
}

template<typename T> 
void func(T*)
{
std::cout << 3;
}

template<> 
void func(int*)
{
std::cout << 4;
}

int main()
{
int* p = nullptr;
func(p); //4 yazar
}

---------------------------

partial specialization (kısmi) : alt küme için alternatif kod veriyoruz

template <typename T>
struct Myclass {
public:
Myclass()
{
std::cout << "primary template type T is : " << typeid(T).name() << '\n';
}
};

template <typename T>
struct Myclass<T *> { //template argümanı pointer olduğunda partial kullanılcak

};


------------
template <typename T>
struct Myclass {
public:
Myclass()
{
std::cout << "primary template type T is : " << typeid(T).name() << '\n';
}
};

template <typename T>
struct Myclass<T *> { 
Myclass()
{
std::cout << "partial spec. T *\n";
}
};

int main()
{
Myclass<int> m1;
Myclass<double> m2;
Myclass<void> m3;
Myclass<int*> m4;
Myclass<double**> m5;
}

------------

!! explicit specilation sadece 1 specialiton için (örn. int*) 
partial bir küme için (int*, void* ...)

template <typename T, typename U>
struct Mert {
Mert()
{
std::cout << "primart template\n";
}
};

template <typename T>
struct Mert<int, T> {
Mert()
{
std::cout << "partial template\n";
}
};

int main()
{
Mert<double, int> m1; // primart
Mert<int, int> m2; //partial

}

-----------------

template <typename T, typename U>
struct Mert {
Mert()
{
std::cout << "primart template\n";
}
};

template <typename T>
struct Mert<T, T> { //2 template argümanı aynı ise
Mert()
{
std::cout << "partial template\n";
}
};

int main()
{
Mert<double, int> m1; 
Mert<int, double> m2; 
Mert<int, int> m2; 
}

---------------

template <typename T, typename U>
struct Mert {
Mert()
{
std::cout << "primart template\n";
}
};


template <typename T, typename U>
struct Mert <std::pair<T, U>> {
Mert()
{
std::cout << "partial specialition\n";
}
};

int main()
{
Mert<int> m1;
Mert<std::pair<int, long>> m2;
}

------------------

template <int BASE, int EXP>
struct Power {
static const int value = BASE * Power<BASE, EXP - 1>::value;
};

template <int BASE>
struct Power<BASE, 0> {
static const int value 1;
};

int main()
{
constexpr int val = Power<3, 5>::value;
}

--------------------------------

alias template (tür eş isim şablonu) bahsediceğiz
variable template bahsediceğiz
variadic template bahsediceğiz


---------------------------------
sağ taraf referansı taşıma semantiği ve perfecr forwarding için eklenmiştir
 
perfect forwarding (mükemmel gönderim)
-------------------

void func(T x)

void foo(T x)
{
func(x);
}

int main()
{
foo(arg) //foo ben sana argğmanlar gönderiyorum sen benim göderdiğim argümanlar ile func çağırıcaksın
//argüman L value ya da R value olabilir
//argüman const ya da non const da olabilir
//ancak ben const gönderirsem const, R gönderirsem R göndericeksin
}

-----------

perfect forwarding önemi üzerine örnek

class Myclass {};

void foo(Myclass&)
{
std::cout << "Myclass&\n";
}

void foo(const Myclass&)
{
std::cout << "const Myclass&\n";
}

void foo(Myclass&&)
{
std::cout << "Myclass&&\n";
}

//call foo kullanmamnın uzun yolu

void call_foo(Myclass& x)
{
foo(x);
}

void call_foo(const Myclass& x)
{
foo(x);
}

void call_foo(Myclass&& x)
{
foo(std::move(x));
}


int main()
{
Myclass m;
const Myclass m;

foo(m);
call_foo(m);
foo(cm);
call_foo(cm);
foo(Myclass{});
call_foo(Myclass{});

}


-----------

yukarıdakinin çözümü olarak universel ref. kullanabiliriz

class Myclass {};

void foo(Myclass&)
{
std::cout << "Myclass&\n";
}

void foo(const Myclass&)
{
std::cout << "const Myclass&\n";
}

void foo(Myclass&&)
{
std::cout << "Myclass&&\n";
}

template <typename T>
void call_foo(T&& x)
{
//l value l value olarka, r value r value olucak
foo(std::forward<T>(x));

}

int main()
{
Myclass m;
const Myclass m;

foo(m);
call_foo(m);
foo(cm);
call_foo(cm);
foo(Myclass{});
call_foo(Myclass{});
}

-------------------
tipik contanier örneği

stl containerların isimlerinde "emplace" sözcüğü geçen ekleme (insertion) kodları var

----------------------------

alias template (eş isim) : türün yerine geçen eş isim
------------------------

using bildiriminin template olarak kullanılmasına alias denir

template <typename T>
using ptr = T*;

int main()
{
ptr<int> p1;
ptr<double> p;

}

-------

template <typename T>
using Ar10 = T[10];

int main()
{
Ar10<int> x;
Ar10<double> y;
}

-------

template <typename T, std::size_t N>
struct Array;

template <std::size_t N>
using intar = Array<int, N>;

int main()
{
intar<20>
}

---------

//çok sık kullanılan yapı

template <typename T>
using gset = std::set<T, std::greater<T>>;

int main()
{
using namespace std;

set<int, greater<int>> myset;
gset<int> myset2;
}

-------

template <typename T>
struct Nec {

using value_type = T;

};

template <typename T>
using Nec_t = typename Nec<int>::value_type

int main()
{
Nec_t<int>
}

-------------------------

// variadic template

template <typename T, typename U> // normalde 1,2,3 parametresi olabilir

bizim ayrı ayrı templateler oluşturmamız gerekiyor, buna sağlayana araca template parameter packet

template <typename T> // tür parametre
template <int N> // non-type param
template <typename <typename> typename T> // template template parametre

bunların hepsini gerçekleştiren paket vardur

sentaxı :

template <typename ...TS>
class Myclass {

};

int main()
{
Myclass<int, double>
}

------

illa tür parametresi olması gerekmez

template <int ...VALS>
class Myclass {

};

int main()
{
Myclass<1, 3, 5> x;
}

--------

parametre paketi ile sizeof operatörü de devreye girer ancak bu sizeof bizim bildiğimiz sizeof deği

template <int ...VALS>
class Myclass {
public:
static constexpr auto x = sizeof...(VALS); 

};

int main()
{
constexpr auto val = Myclass <1, 3, 7, 6, 8>::x
}

--------

template <typename ...Ts> //template parametre pack
void func(Ts ...args) //function parametre pack
{

}

int main()
{
func(1, 2.3, 45L);
}


---------------

class TypeTeller;

//pack expansion

template <typename ...Ts>
void func(Ts ...args)
{

}

int main()
{
func(2, 5, 3.4, "alican");

}

---------------

pack extension tür parametrelerine de uygulanabilir

template <typename ...Ts>
class Myclass {

};

template <typename ...Ts>
void func(Ts ...args)
{
Myclass<Ts...> mx;
}

int main()
{
func(2, 5L, 3.4, "alican");
}

------------

template <typename ...Ts>
void func(Ts&& ...args);

template <typename ...Ts>
void foo(Ts && ...args)
{
func(std::forward<Ts>(args)...);
//func(std::forward<int>(p1), std::forward<double>(p2), std::forward<int>(p3) 
}

int main()
{
int ival;
double dval;

func(12, dval, ival);
}

-----------

template <typename ...Ts>
void func(Ts ...params)
{
int a[] = { params... };

}

int main()
{
func(1, 5, 7, 9);
}

-----------

kalıtımda kullanılabilir

class A {
public:
void fa();
};

class B {
public:
void fa();
};

class C {
public:
void fa();
};


template <typename ...Ts>
class Myclass : public Ts... {

/*
public:
using Ts::foo...;

*/
}

int main()
{
Myclass<A, B, C> m1;

m1.fa();
m1.fb();
m1.fc();
}

---------------
recursive instantitiation

template <typename T>
void print(const T& t)
{
std::cout << t << " ";
}


template <typename T,typename ...Ts>
void print(const T&t, const Ts& ...args)
{
print(t);
print(args...);

}

int main()
{
print(1, 2.3, "alican", 4.5f);
}

-------------

template <typename ...Ts>
void print(const Ts& ...args)
{
((std::cout << args << " "), 0)...
imt a[] = {((std::cout << p1 << " "), 0), ((std::cout << p2 << " "), 0)};
}

--------------

template <typename ...Ts>
void print(const Ts& ...args)
{
using ar = int[];

Ar{ ((std::cout << args << '\n'), 0)... };
}

int main()
{
print(2, 6, 1.2, "mustafa",std::string{necati"}, 56765);
}

------------

c++ 17 ile fold expressions eklendi variadic işlemlerin daha kolay yapılmasını sağlıyır

template <typename ...Ts>
auto sum(Ts ...args)
{
// return (args + ...) //unary right fold
return (... + args); //unary left fold
//((p1 + p2) + p3) + p4
}

int main()
{
using namespace std;

std::cout << sum(1, 3, 6, 5) << "\n";
}

----------

template <typename ...Ts>
auto div(Ts ...args)
{
return (args / ...)
//p1 / (p2 / (p3 / p4))
}

int main()
{
using namespace std;
std::cout << div(500, 100, 20, 10) << '\n';
}

--------------------

variadic templatesler
 recursive function instantiation
  static if
 init list
 fold expression
  unary right fold
  unary left fold
  binary left fold
 
--------------------

makeuniqu

template <typename T, typename ...Ts>
std::unique_ptr<T> MakeUnique(Ts&& ...args)
{
return std::unique_ptr<T> (new T(std::forward<Ts>(args)...)
}

int main()
{
MakeUnique<Myclass>(2, 6, 7)
}

------------------

class Myclass {
public:
Myclass(int, double);
Myclass(std::string, std::string, int);
};

int main()
{
using namespace std;

vector<Myclass> mvec;

mvec.emplace_back(12, 4.5);
mvec.emplace_back("ali", "veli", 12);
}


-----------------

variable templates
------------------

template <typename T>
constexpr T pi = T(3.1459265342432L);

int main()
{
constexpr auto x = pi<int>;
}

---------

template <typename T>
constexpr T pi = T(3.1459265342432L);

template <typename T>
T get_circle_area(T radius)
{
return pi<T> radius * radius
}

int main()
{
get_circle_area(4.5L)
}














