//////////////////////////////////////////////////1. Ders//////////////////////////////////////////

template tekrarı...

variadic template:

template <typename ...Ts> //template parameter pack
template <int ...Vals>

------------------------------------

int main()
{
using namespace std;

bitset<32> //template argümanının 32 olmasını istiyoruz
}

-----------

template <typename T, typename U = int>
class Myclass {

};

int main()
{
Myclass<double, long>
}

-----------

!! template tanımları başlık dosyalarında yapılamaz
cpp dosyasında her şey gerçekleşir

!! template kod gizlenemez

---------

template <typename T>
class Neco;

template <typename T, typename U>
void foo(T, U);

#include "bugra.hpp" //burada tanım ile içeriği birbirinden gizlemek için
böyle bir hile kullanılabilinir

-------------------------------------------------------------

fonkksiyon template (fonksiyon şablonu): derleyicinin fonksiyon kodu yazmasını sağlayan kod kalıbı 
----------------------------------------

template <typename T>
void foo(T x)
{
T y{};
T* p = &y;
T** ptr = &p;
}

------

template <typename T>
void foo(int x, int y); //bu şekilde olabilir template kullanmak zorundna değiliz

------

template <typename T>
void foo(T x, int y) //bu şekilde de olabilir
{

}

------

template <typename T>
void foo() //bu şekilde de olur tür kullanılmak zorunda değil
{

}

int main()
{
foo<int>();
}

------------------------------------------------

template argument deduction : 
-----------------------------

derleyici bir şablon söz konusu olduğunda bu şablondaki 
template parametreleri karşılığı instanci yapmak için hangi template argümanlarını kullanıcağını
koda bakarak anlıycak


!! auto ile template argument arasında 1 istisna dışında fark yoktur

-------

int main()
{
auto x = 10;

foo(10);
}

------

auto haşağıdaki şekillerde olabiliyordu

auto x = expr;
auto& x = expr;
auto && y = expr;

------
istisna :

#include <initializer_list>

int main()
{
auto x = {1, 2, 3, 4, 5};
}

--------
#include <initializer_list>

template <typename T>
void foo(T) 
{

}

int main()
{
foo({1, 2, 3, 4, 5}); //tek fark burasısıdr hata verir
}

--------

template <typename T>
void foo(T) 
{

}

int main()
{
const int ival = 4;
foo(ival); T çıkarımı int ival, const düşer
}

---------

template <typename T>
void foo(T) 
{

}

int main()
{
int y{};
int& r = y;

foo(r); //T için yapılan çıkarım int
}

-------

template <typename T>
void foo(T) 
{

}

int main()
{
int y{};
const int& r = y;

foo(r); //T için yapılan çıkarım int
}

-------

template <typename T>
void foo(T) 
{

}

int main()
{
int a[5]{}

foo(a); //int için yaplan çıkarım int*
}

-------

template <typename T>
void foo(T) 
{

}

int main()
{
const int a[5]{}

foo(a); //int için yaplan çıkarım const int*
}

--------

template <typename T>
void foo(T) 
{

}

int bar(int);

int main()
{

foo(bar); //int (*)(int), function pointer type

}
//Bu söylenenlerin hepsi auto içinde geçerli

--------

template <typename T>
void foo(T) 
{

}

int main()
{
foo("bugrahan"); //const char*
}

------------------

!! Aşağıdaki yapı ile derleyicinin bize verdiği hata mesajı ile
türünü bulabiliriz

template <typename T>
class TypeTeller;

template <typename T>
void foo(T) 
{
TypeTeller<T> x;
}

int main()
{
const int x{}
foo(x); //x türü bulunur 
foo("bugrahan"); 
}

---------------------

deduction her zaman başarılı olmak zorunda değil 
fonksiyon argümanında gönderilen argüman olduğu zaman çıkarımın yapılamaması

template <typename T> 
void foo();

int main()
{
foo();
}

---------

template <typename T> 
void foo(int, int);

int main()
{
foo(12, 56); //hata
}

---------

template <typename T> 
void foo(T, T);

int main()
{
foo(12, 56); //legal
foo(12, 5.8); //ambigidious hata
}

---------

template <typename T, typename U> 
void foo(T, U);

int main()
{
foo(12, 5.8); //legal
}


--------

template <typename T> 
void foo(T, T);

int main()
{
int a[10]{};
int b[234]{};
foo(a, b); //legal
}

-------

template <typename T> 
void foo(T, T);

int main()
{
int a[10]{};
double b[234]{};
foo(a, b); //hata 
}

-------

template <typename T> 
void foo(T, T);

int main()
{
foo("bugrahan", "serttas"); //legal
}

------------------

template <typename T>
class TypeTeller;

template <typename T>
void foo(T&) 
{
TypeTeller<T> x;
}

int main()
{
int x = 10;
foo(x); //t iiçin yapılan int ama fonksiyon parametresi t&
}

------------

template <typename T>
class TypeTeller;

template <typename T>
void foo(T&) 
{
TypeTeller<T> x;
}

int main()
{
const int x = 10; //const int
foo(x); 
}

---------------

template <typename T>
class TypeTeller;

template <typename T>
void foo(T&) 
{
TypeTeller<T> x;
}

int main()
{
int a[4]{};
foo(a); //int(&)[4]
}

---------------

template <typename T>
class TypeTeller;

template <typename T>
void foo(T&) 
{
TypeTeller<T> x;
}

int main()
{
const int a[4]{};
foo(a); 
}

----------------
//mülakatta sorulan bir soru

template <typename>
class TypeTeller;

template <typename T>
void foo(T&, T&) 
{

}

int main()
{
foo("can", "eda"); //legal, const char[4], const char[4]
foo("naci", "cemal"); //hata ,const char[5], const char[6]
}

-----------------

template <typename>
class TypeTeller;

template <typename T>
void foo(T&, T) 
{

}

int main()
{
int a[5]{};
foo(a, a); //illegal
}

--------------------

template <typename>
class TypeTeller;

template <typename T>
void foo(T&) 
{
TypeTeller<T> x;
}

int bar(int);

int main()
{
foo(bar); //int(int)
}

--------------------

zor olan kısıma geçiruz, programcıların en çok karıştırdığı kısım

template <typename T>
void func(T &&) //universal referans  /std ==> forwarding reference
{
//bu fonksiyona yapılan bütün çağrılarla yapılan çağrılar legaldir

}

-------

class Myclass{};

void func(Myclass &&) //R value
{

}

-----------

template <typename T>
void func(T &&) 
{

}

int main()
{
int x = 10;
const double dval = 4.5;

func(x); //legal
func(45); //legal
func(dval); //legal
}

--------------

template <typename T>
void func(T &&) //Nec&, refernas collapsing. ile ilgili
{

}

class Nec{};

int main()
{
Nec mynec;
func(mynec);
}

--------------

class Nec{};

using refref = Nec&&;

int main()
{
Nec mynec;
refref& r = Nec{} //nec&
refref&& r = Nec{} //nec&&

}

-------------

template <typename>
class TypeTeller;

template <typename T>
void func(T &&) // T ==> Myclass
{
TypeTeller<T> x;
}

class Myclass {};

int main()
{
func(Myclass{});
}

--------------
!! 
template <typename T>
void func(T&&)
{
//L value gönderirsek fonksiyon parametre değişkeni L value
//R value gönderirsek fonksiyon parametre değişkeni R value
}

-------------

template <typename T>
void func(T&& x)
{

}

int main()
{
const int x{};
func(x);
}

--------------

int main()
{
int x = 5;
auto&& r = x;
}

-------------

tür çıkarımı hakkında konuşmaya devam ediyoruz

template <typename T, int N>
void func(T(&r)[N])
{

}

int main()
{
int a[20]{};
double b[10]{};

func(a); //func<int, 20>(a);
func(b); //func<double, 10>(b);
func("bugra"); 
}


--------------

zor bir örnek

template <typename>
class TypeTeller;

template <typename T, typename U> //T için int, U için double çıkarımı yapılır
void func(T (*)(U)) //int (*)(double)
{

}

int foo(double);

int main()
{
func(foo);  
}

-----------------------

fonksiyon çağrısı deduction için tek yol değildir
fonksiyonun adresini alarakta yapabiliriz

template <typename T>
void func(T)
{

}

int main()
{
void (*fp1)(int) = func;
void (*fp1)(double) = func;
}

----------------

template <typename T>
void foo(T*);

template <typename T>
void func(T x)
{
foo(&x);
}

int main()
{
func(12);
}

---------------

stl en çok kullanılan fonksyion şablonu, swap

template <typename T>
void Swap(T& t1, T& t2)
{
T temp{std::move(t1)}
t1 = std::move(t2);
t2 = std::move(t1);
}

------
#include <utility>

int main()
{
int x = 24;
int y = 45;

std::swap(x, y);
std::cout << "x = " << x << '\n';
std::cout << "y = " << y << '\n';
}

-----

#include <utility>

int main()
{
std::string s1{"bugrahan"};
std::string s1{"serttas"};

std::swap(s1, s2);
std::cout << s1 << " " << s2 << "\n";
}

-------------

template <typename F>
void func(F f)
{
auto val = f(12);
std::cout << "val = " << val << "\n";
}

int foo(int x)
{
std::cout << "foo cagrildi x = " << x << "\n";
return x * x;
}

int main()
{
func(foo);
}

-------------

template <typename F>
void func(Fn f)
{
auto val = f(12);
std::cout << "val = " << val << "\n";
}

class Nec {
public:
int operator()(int x)const
{
std::cout << "Nec::operator()(int x) x = " << x << '\n';
return x * x * x;
}
};

int main()
{
func(Nec{});
}

--------------

C++ 20 ile geldi, kısaltılmış template standartı

template <typename T>
void func(T x)
{

}

//yukarıdaki, aşağıdaki şekilde yazılabilir, çok sık kullanılıyor

void func(auto x)
{

}

------

template <typename T, typename U>
void func(T x, U y)
{

}

//

void func(auto x, auto y)
{

}

----------------------

c++ 11 ile 

// trailing return type
// auto return type
geldi 


trailing return type: normal main ile aynı anlamda aşağıdakini kullanmanın bir manası yok
---------------------
auto main() -> int
{

}


işe yaradığı yerler

int (*foo(())(int) //geri dönüş değeri türü int(*) (int)
{

}

----

int bar(int);

auto foo() -> int(*)(int)
{
return bar;
}

----

template <typename T, typename U>
auto sum(T x, U y) -> decltype(x + y) //ok'un sağında parametre değişkenlerini kullanabiliyoruz
{

}

-----------

auto return type : fonksiyonun geri dönüş değeri türünün return ifadesinden yapılması demektir

auto foo(int x)
{
return x * 1.3; //geri dönüş değeri double
}

----

auto foo(int x)
{
if (x > 10)
return 1;

return 2.3; //hata
}

-----

template <typename T>
auto foo(T x)
{

return x.bar();
}

----------------------

fonksiyon şablonu sınıfın üye fonksiyonu da olabilir

class Myclass {
public:
void foo(int);

template <typename T>
//void bar(auto x) //c++20 ile bu şekilde yazılabilinir
void bar(T x)
{

}
};

int main()
{
Myclass m;

m.bar(12); //derleyici int parametreli fonksiyon yazar
m.bar(1.2); //derleyici double parametreli fonksiyon yazar
m.bar("ali"); //derleyici const char* parametreli fonksiyon yazar
}

-----------

template <class T> //bu şekilde yazılamıycağı bir senayo vardır

class Myclass {
public:
using value_type = int;
};

template <class T>
void func(T x)
{
typename T::value_type y{};
}

----------

template <typename R, typename T, typename U> //geri dçnüş değerini template yapabilriiz (R)
R sum(const T& x, const U& y)
{
return x + y; 
}

int main()
{
sum<double>(12, 4.5); //bu şekilde olabilir

int x = 45;
float f = 3.4;
sum<double>(x, f); //bu şekilde de olabilir

auto val = sum<double>(x, f);
}

----------
#include <typeinfo>

template <typename T>
void func(T)
{
std::cout << typeid(T).name << "\n";
}

int main()
{
func(12.4); //her farklı argüman için farklı bir speciliation yazıcak
func(12.4f);
func(12);
func('A');

func<double>('A'); //Bu şekilde double olarak döndürür
}

---------------

fonksiyon şablonları aynı isimli başka fonksiyon şablonları ile aynı isimli bulunabilir 
yani bir fonksiyon şablonu ile bir fonksiyon aynı isimde ise birbirini overload ederler

--------

template <typename T>
void func(T)
{
std::cout << "function template: " << typeid(T).name() << "\n";
}

void func(int x)
{
std::cout << "harbi fonksiyon\n";
}

//void func(int) //bu çağrılır, exact match
//void func<int>(int) 

int main()
{
func(13);
}

---------------

eski bir mülakat sorusu,
öyle bir kod yaz ki int argüman ile cagrilması zorunlu

template <typename T>
void func(T) = delete;

void func(int);

int main()
{
func(12);
}

-------------

birden fazla fonksiyon şablonu da bir arada bulunabilir, overloading

template <typename T>
void func(T x)
{

}

template <typename T>
void func(T x, T y)
{

}

template <typename T>
void func(T *p)
{

}

-------------
partial ordering rules : daha spesifik daha fazla nitelenmiş parametreye sahip
template seçilir, (kısa bir değindi konu daha detaylı)

template <typename T>
void func(T x)
{
std::cout << "T x\n";
}

template <typename T>
void func(T *p)
{
std::cout << "T* p\n";
}

int main()
{
int x = 10;
func(&x);
}
------------

explicit template : açısal parantez içine yazılana denir. //void func<int>(int) 
 
////////////////////////////////////////////////////2. Ders///////////////////////////////////////////////////

sınıf şablonları (template)
----------------------------

----------

template paeamteresi birden fazla olabilir, parametreler type, non-type, template parametre olabilir
bunların paket hali olabilir

template <typename T>

template <int x> //non-type

template <std::size_t x>

-----------
//Bu bir sınıf değildir, class templatedir
derleyici için bir sınıfın kodunun nasıl yazılabiliceğini gösteren bir meta koddur

template <typename T>
class Myclass {

};

int main()
{
Myclass<int>
Myclass<double>

}

-----------

template <typename T>
class Myclass {

};

template <typename T>
class Nec {

};

int main()
{
Nec<Myclass<int>>

}

-------------

template <typename T>
class Myclass {

};

int main()
{
Myclass<Myclass<Myclass<int>>> //modern cpp öncesi >> maximul munc kuralına takılırdı
}

------------

int main()
{
using namespace std;

vector<int> //vectörün int açılımı, öğeleri int türden olan specializtanı temsil ediyor
vector<vector><int>> //elemanları int vector olucak
vector<vector<vector<int>> //elemanları int vector vector olucak
}

-------------

template <typename T>
class Myclass {

};

int main()
{
Myclass<int> x; //bu yapıların hepsi olabilir
Myclass<int>* p{ &x };
Myclass<int>&r{ x };
}

--------------

template <typename T>
class Myclass {

};

void foo(const std::vector<int>&);
std::vector<double> bar();
//foo geri dönüş değeri double türden elemanlar tutucak bir dinamik dizi döndürürdöndürür, 

-------------
//en tipik hatalar...

template <typename>
class Myclass{

};

int main()
{
Myclass<double> dm;
Myclass<int> im;
//dm ile im türü farklıdır

dm = im; //Hata olur, Myclass<int> türden Myclass<double> türüne dönüşüm olmaz
}

-------------

template <typename>
class Myclass{

};

int main()
{
Myclass<5> x;
Myclass<6> y;

y = x; //hata, ayrı ayrı sınıflardır dönüşüm olmaz
}

---------------

int main()
{
using namespace std;

vector<double> dvec(100);
vector<int> ivec(100);

dvec = ivec; //hata 
}

------------------

template <typename T>
class Myclass {

public:
void foo(T x)
{
++x;
}
};

class Nec {};

int main()
{
Myclass<Nec> mynec; //hata olmaz, ++x çağrılmadı

mynec.foo(mynec)
}

--------------

template <typename T>
class Myclass {

public:
void foo(T x)
{
++x;
}
};

class Nec {};

int main()
{
Myclass<Nec> m;
Nec mynec;

m.foo(mynec); //hata olur
}

------------

yukarıdaki durumun avantajları vardır boş yere fonksiyon çağırmamış oluruz

------------

//myclass.h

template <typename T>
class Myclass {

public:
T bar(T);
void foo(T x)
{
x.f();
++x;
x = 0;
}
};

//myclass.hpp
#include "myclass.h"


----------------

üye fonksiyonun tanımını görmek zorundadır

template <typename T>
class Myclass {

public:
void foo(T x)
{
x.foo();
++x;
x = 0;
}
};

template <typename T>
T Myclass<T>::bar(T x)
{

}

-----------
//myclass.h

template <typename T, typename U>
class Myclass {

public:
void foo(int); //
};

template <typename T, typename U>
void Myclass<T, U>::foo(int cx) //foo class dışında bu şekilde tanımlanır
{

}
-------------
//myclass.h
//tanımları bu şekilde olucal
template <typename T>
class Myclass {

public:
void foo(T);
void bar(T, T);
void bar(int);

};

template <typename T>
void Myclass<T>::foo(T)
{

}

template <typename T>
void Myclass<T>::bar(T, T)
{

}

template <typename T>
void Myclass<T>::baz(int)
{

}

-------------
fonksiyon şablonları ile sınıf şablonları birlikte kullanılacak çoğu zaman

template <typename T>
class Myclass {

};

template <typename T>
void func(Myclass<T>&);

int main()
{
Myclass<int> x;
func(x);
}

--------------

template <typename T>
class Myclass {

};

template <typename T>
bool operator==(const Myclass<int>&, const Myclass<int>&)
{

return true;
}

---------------

2 tane vectorü toplıycak kod

template <typename T>
class Myclass {

};

template <typename T>
std::vector<T> operator+(const std::vector<T>&, const std::vector<T>&)
{

return {};
}

-----------------
//en çok karşımıza çıkan durumlardan bir tanesi
//sınıf şablonlarının üye fonksiyonlarında yine sınıf şablonu olması

//mülakatlarda necati hocanın çok sorduğu birkaç soru

template <typename T>
class Myclass {

public:
void foo(T&&); //üniversel refernas tür çıkarımı olduğu zamandı
};

int main()
{
Myclass<int> m; 

m.foo(12);

}

--------------

class Myclass {
public:

template <typename T>
void func(T x); //member template  
};

//yukarıdaki yapı bize aşağıdakini sağlar
//bir sınıfın üye fonksiyonu template olabilir

int main()
{
Myclass m;

m.func(1); 
m.func(1.3);
m.func<float>(1);

}

-------------

class Myclass {
public:

template <typename T>
bool operator()(T)const; //her farklı argüman için
};

int main()
{
Myclass m;

m(12);
m.operator()(12);
m(1.2);
}

-------------
//sınıfın özel fonksiyonları bile template olabilir

class Myclass {
public:
template <typename T>
explicit Myclass(T);
};

int main()
{
Myclass m1(12);
Myclass m2(1.2);

}

-------------

templatelere geliyoruz

template <typename T>
class Nec {

public:
void func()
{
Nec x; //Nec'in scobunda bunu yazmakla aşağıdakini yazmak aynı anlamdadır
Nec<T> x;
}
};

int main()
{

}

-------------

template <typename T>
class Nec {

public:
Nec func(Nec x) //Nec<T> func(Nec<T> x), aynı anlamdadır
{
return x;
}
};

-----------

template <typename T>
class Nec {

public:
Nec func(Nec x)
{
Nec<T*> x;
}
};


-----------
//sınıfın dışında bildirirsek

template <typename T>
class Nec {

public:
Nec func(Nec x);
};

template <typename T>
Nec<T>::func(Nec<T> x)
{
Nec y{ x }; //bu şekilde tanımlayabiliriz
return y;
}

-----------

template <typename T>
class Nec {

public:
Nec func(Nec x); //burasıda template yapılabilinir aşağıda ki örnekte gösterdim

};

int main()
{
Nec<double> x;
Nec<int> y;

x.func(y); //Hata, nec'in açılımından double dönüşüm var
}

-------------

//bir template'in farklı speciliationları için 
kod yazmak istiyorsak member template olmalıdır

template <typename T>
class Nec {

public:
template <typename U>
Nec func(Nec<U> x)
{
std::cout << typeid(*this).name() << "\n";
std::cout << typeid(x).name() << "\n";
}
};

int main()
{
Nec<int> x;
Nec<double> y;

x.func(y);
}

--------------
#include <utility>

std::pair //2 tane farklı türden öğeyi paketliyor

--------------

öyle yerler vardır ki 2 tane farklı veya aynı türden öğeyi
bir arada tutmak isteriz 

//basitleştirilmiş hali

template <typename T, typename U>
struct Pair {

T first;
U second;

};

Pair<int, double> 

-------------

std::pair<int, double> foo(); //bir int birde double döndürülür

int main()
{
auto p = foo();
p.first //ilk öğeye erişir
p.second //ikinci öğeye erişir

}


-------------

std::pair<int, double> foo();

int main()
{
using namespace std;

pair<double, double> pd{2.3, 5.6};
pair<int, int> pi{12, 23};

pd = pi;
}

--------------

int main()
{
using namespace std;

pair p1{4, 5.6}; //CTAD(sitak)
pair<int, string> x;

cout << "x.first = " << x.first << '\n';
cout << "x.second = " << x.second << '\n';
}

---------------
pair kullanarak kod yazıyoruz...


int main()
{
using namespace std;

pair<int, double> px{3, 6.7};

cout << px; //hata
}

-----------

std::ostream& operator<<(std::ostream& os, std::pair<int, double>& p)
{
return os << '[' << p.first << ", " << p.second << ']';
}

int main()
{
using namespace std;

pair<int, double> px{3, 6.7};

cout << px; 
}

--------------

template <typename T, typename U>
std::ostream& operator<<(std::ostream& os, const std::pair<T, U>& p)
{
return os << '[' << p.first <<", " << p.second << ']';
}

int main()
{
using namespace std;
pair<string, double> p1{ "tamer dundar", 6.7};
pair<int, char> p2{862, 'A'};

cout << p1 << " " << p2 << '\n';

}

-------------

template <typename T, typename U>
std::ostream& operator<<(std::ostream& os, const std::pair<T, U>& p)
{
return os << '[' << p.first <<", " << p.second << ']';
}

int main()
{
using namespace std;
pair p1{2, 6.7};
pair<string, string> p2("furkan", "emrecan");

pair <pair<int, double>, pair<string, string>> p3{p1, p2};
cout << p3 << "\n";

}

----------------

idiyomatik bir yapıya daha bakıyoruz

template <typename T>
std::pair<T, U> MakePair(const T& t, const U& u)
{
return std::pair<T, U>(t, u);
}

int main()
{
auto p = MakePair(12, 5.6); //geri dönüş değeri std::pair(int, double)
}

------------------

template <typename T, typename U>
std::ostream& operator<<(std::ostream& os, std::pair<int, double>& p)
{
return os << '[' << p.first << ", " << p.second << ']';
}

int main()
{
using namespace std;
std::string s1{"melike"}, s2{"bilge"};
cout << make_pair(make_pair(2, 5.6), make_pair(s1, s2)) << '\n';
}

------------------
//c++ 20 öncesinde non-type parametrelere karşılık gelen argümanlar 
aşağıdakiler olabiliyordu

a) tam sayi türleri
b) enum türleri
c) object pointer  / referasn türleri
d) function pointer türleri
e) member function pointer türleri

template <double dval> //c++ 20 öncesi hatalı idi
class Myclass {

};

//c++20 ile gerçek sayı türleri non-type parametre olarak kullanılabiliyor
bazı sınıf türleri de kullanılabiliyor

-------------------

template <double dval>
class Myclass {

};

int main()
{
Myclass<12.5> x; //cpp 20 öncesinde hatalı bir koddu
}








