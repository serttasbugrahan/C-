//////////////////////////////////////////////////////////////////////// 1. Ders /////////////////////////////////////////////////////

STL öncesinde bir konu ile tanışıyoruz...

template meta programing (TMP) : compile time da olan sorgulamalar
-------------------------------

template <typename T, T v>
struct IntegralConstant {
static constexpr T value = v;
using value_type = T;
using type = IntegralConstant;
constexpr operator value_type()const noexcept { return value; }
constexpr value_type operator()()const noexcept {return value; }
};

int main()
{
constexpr auto val = IntegralConstant<int, 5>{}();
}

-----------

template <typename T, T v>
struct IntegralConstant {
static constexpr T value = v;
using value_type = T;
using type = IntegralConstant;
constexpr operator value_type()const noexcept { return value; }
constexpr value_type operator()()const noexcept {return value; }
};

using TrueType = IntegralConstant<bool, true>;
using FalseType = IntegralConstant<bool, false>;

template <typename T>
struct IsPointer : TrueType {};

template <typename T>
struct IsPointer<T *> : trueType {};

template <typename T>
void func(T x)
{
static_assert(IsPointer<T>::value, "I am soryy. only for pointer types...");
}

int main()
{
func(12);
}






