//////////////////////////////////////////////////////////////////////// 1. Ders /////////////////////////////////////////////////////

STL öncesinde bir konu ile tanışıyoruz...

template meta programing (TMP) : compile time da olan sorgulamalar
-------------------------------

template <typename T, T v>
struct IntegralConstant {
static constexpr T value = v;
using value_type = T;
using type = IntegralConstant;
constexpr operator value_type()const noexcept { return value; }
constexpr value_type operator()()const noexcept {return value; }
};

int main()
{
constexpr auto val = IntegralConstant<int, 5>{}();
}

-----------

template <typename T, T v>
struct IntegralConstant {
static constexpr T value = v;
using value_type = T;
using type = IntegralConstant;
constexpr operator value_type()const noexcept { return value; }
constexpr value_type operator()()const noexcept {return value; }
};

using TrueType = IntegralConstant<bool, true>;
using FalseType = IntegralConstant<bool, false>;

template <typename T>
struct IsPointer : TrueType {};

template <typename T>
struct IsPointer<T *> : trueType {};

template <typename T>
void func(T x)
{
static_assert(IsPointer<T>::value, "I am soryy. only for pointer types...");
}

int main()
{
int x = 789;
func(&x);
//func(12);
}

//bu işlemler type_traits başlık dosyasında bulunur


-----------------------

#include <type_traits>

template <typename T>
void func(T x)
{
static_assert(std::is_pointer::value, "I am soryy. only for pointer types...");
}

int main()
{
int x = 678;
func(&x);
}

-----------------------
#include <type_traits>

template <typename T>
void func(T)
{
static_assert(std::ispointer_v<T>); //compile time da value hesaplamanın yöntemi
}

int main()
{

}

---------------

template <typename T>
struct RemoveReferance {
using type = T;
};

template <typename T>
struct RemoveReferance<T&> {
using type = T;    
};

template <typename T>
struct RemoveReferance<T&&> {
using type = T;    
};

template <typename T>
using RemoveReferance_t = typename RemoveReference<T>::type;

int main()
{
// RemoveReferance<int>::type //bunun yerine aşağıdaki yazılabilecek 
RemoveReferance_t<int>;
}

--------------
//öyle bir fonksiyon yazılmak isteniyorki bu fonksiyona argüman olarak 
//l value geldiğinde ayrı kod r value geldiğinde ayrı kod çalışıcakk ve bu seçim compiler time de olucak

//birçok yolu vardır, bir tanesi : tag-dispatch

void bar(std::true_type)
{
std::cout << "implementation for l values\n";
}

void bar(std::false_type)
{
std::cout << "implementation for r values\n";
}


template <typename T>
void func(T&&)
{
	bar(std::is_lvalue_reference<T>{});
}

int main()
{
func(12);
int x { 21 };

func(x);
}

----------------

template <typename T>
void func_impl(T, std::true_type)
{
std::cout << "tam sayi turleri icin\n";
}

template <typename T>
void func_impl(T, std::false_type)
{
std::cout << "tam sayi olmayan turleri icin\n";
}

template <typename T>
void func(T x)
{
func_impl(x, std::is_integral<T>{}); 
}

int main()
{
func(12); //patch dispatch
}

------------

template <typename T>
void func(T x)
{
if constexpr (ct expression) {
//code for true path
}
else {
//code for false path
}
}


int main()
{
func(12); //patch dispatch
}

-----------------
//static if (cpp 17 ile geldi)

template <typename T>
auto get_value(T x)
{
if constexpr(std::is_pointer_v<T>){
return *x;
}
else {
return x;
}
}

int  main()
{
int x = 5;
double dval = 4.677;

int* ip{ &x };
double* dp{ &dval };

std::cout << get_value(x) << '\n';
std::cout << get_value(dval) << '\n';
std::cout << get_value(ip) << '\n';
std::cout << get_value(dp) << '\n';

}

======================================================================

STL (Standart Template Library)
--------------------------------

3 baş rol oyuncusu vardır

constaniers 

Iterators : pointerların daha fazla soyutlanmış hali

Algorithms

---------
sequence contaniners

vector : dinamik dizi sınıfı
deque : dinamik dizinin dizisi
list : çifte bağlı liste
forward_list : tekli bağlı liste
array : arrayleri sarmalayan
string : yazı işleri

associative contaniers : ikili arama ağaçları

set: 1 keyden 1 tane tutulur anahatara erişilir
multiset: 1 keyden birden fazla tutulur anahatara erişilir
map: anahtara karşılık gelen value'a karşılık gelir
multimap: : birden fazla anahtar tutulabilir

unordered associative contaniers

unordered_set
unordered_multiset
unordered_map
unordered_multimap

------------------------

//c dilinde aşağıdaki şekilde yazılırdı

void print_array(const int* ps, const int* pe)
{
while (ps != pe) {
printf("%d ", *ps++);
}
}

int main()
{
int a[5] = {1, 4, 7, 9, 2};

print_array(a, a + 5);
}

----------
//c++ ile yazımı

template <typename Iter>
void print_array(Iter beg, Iter end)
{
while (beg != end) {
std::cout << *beg << ' ';
++beg;
}
std::cout << '\n';
}

int main()
{
int a[5] = {1, 4, 7, 9, 2};
int a[5] = {1.1, 4.5, 7.4, 9.1, 2.32};


print_array(a, a + 5);
print_array(a + 1, a + 5);

}

---------------
//vector ile yazımı

template <typename Iter>
void print_array(Iter beg, Iter end)
{
while (beg != end) {
std::cout << *beg << ' ';
++beg;
}
std::cout << '\n';
}

int main()
{
std::vector<double> dvec{1.1, 4.5, 7.4, 9.1, 2.32};

print_array(dvec.begın(), devic.end());

}

------------------
//list ile yazımı

template <typename Iter>
void print_array(Iter beg, Iter end)
{
while (beg != end) {
std::cout << *beg << ' ';
++beg;
}
std::cout << '\n';
}

int main()
{
std::vector<double> dvec{1.1, 4.5, 7.4, 9.1, 2.32};

print_array(dvec.begın(), devic.end());

std::list<std::string> names{ "melike", "tamer", "serhat", "burak", "damla", "furkan" };

print_array(names.begin(), names.end());
}


----------------------

#include algorithm>

int main()
{
using namespace std;

vector<int> ivec{4, 6, 8,1,9,1,0 };

sort(ivec.begin(), ivec.end());

for (auto i : ivec)
std::cout << i << ' ';
}

--------------

int main()
{
using namespace std;

vector<int> ivec{1, 4, 6, 8, 1, 9, 3, 1, 0 };

count(ivec.begin(), ivec.end(), 1)
}

---------------

iteratör sınıflarının hangi operasyonlara destek sağladığı 
generic programlama araçları ile belli olur

-------------

//eski c++'da bu şekilde yazılırdı

int main()
{
using namespace std;

vector<list<pair<string, string>>> vec;
vector<list<pair<string, string>>>::iterator iter = vec.begin(); //
}

-------

//yeni c++'da yazım
int main()
{
using namespace std;

vector<list<pair<string, string>>> vec;
auto iter = vec.begin(); //
}

-----------------

using namespace std;

int main()
{
vector<int> ivec(1000);

//ivec.begin(); 
begin(ivec); //modern cpp ile geldi daha çok tercih edilir
}

---------

int main()
{
vector<int> ivec(1000);
int ar[100]{};

auto iter = begin(ivec);
}

-----------------------------

iterator category:
------------------

iteratörün interfaceinde hangi operasyonların olduğunu belirleyen
iteratörün kategorisi dediğimiz özelliktir


-input iterator
                              
-output iterator

-forward iterator                    !! bilgisayarda foto var!!

-bidirectional iterator

-random access iterator : c deki pointerlar gibi c deki pointerları sokabildiğimiz her yere sokabiliriz


---------

int main()
{
using namespace std;

vector<int> ivec(100);

auto iter1 = ivec.begin();
auto iter2 = ivec.begin();

*iter1;
++iter1;
--iter1;

//hepsi legal

iter1 += 6;
iter1 - iter2;
iter2[43];

}

-----------

int main()
{
list<int> ilist(100);

auto iter1 = ivec.begin();
auto iter2 = ivec.begin();

*iter1;
++iter1;
--iter1;
//list iteratörleri biderctional iteratordür 
iter1 += 6;
iter1 - iter2;
iter2[43];

}

-----------

//forward_list

int main()
{
forward_list<int> ilist(100);

auto iter1 = ivec.begin();
auto iter2 = ivec.begin();

*iter1;
++iter1;
--iter1;
}

------------

using namespace std;

template <typename Iter>
void func(Iter beg, Iter end)
{
//compile time'da sorgulanabilir
}

//tag class - empty class

//std::input_iterator_tag
//std::output_iterator_tag
//std::forward_iterator_tag
//std::biderctional_iterator_tag
//std::random_access_iterator_tag

int main()
{
cout << typeid(vector<int>::iterator::iterator_category).name() << "\n";
cout << typeid(list<int>::iterator::iterator_category).name() << "\n";

}

---------------------

bugün öğrendiklerimizi birleştirirsek...

//T ve U türlerinin aynı olup olmadığını sınayabilir miyiz?

template <typename T, typename U>
struct IsSame : std::false_type {};

template <typename T>
struct IsSame<T, T> : std::true-type {};


template <typename T, <typename U>
constexpr bool IsSame_v = IsSame<T, U>::value

int main()
{
IsSame<int, int>::value
}

----------

template <typename Iter>
void algo(Iter beg, Iter end)
{
if constexpr(std::is_same_v(typename Iter::iterator_category, std::random_access_iterator_tag>

}
else if constexpr (std::is_same_v<typename Iter::iterator_category, std::bidirectional_access_iterator_tag>)
}

////////////////////////////////////////////////2. Ders ////////////////////////////////////////////////

200 civarında stl algoritması vardır

-algoritmalar exception throw etmez


std::copy
==========

aşağıdaki kod ile örneğin person sınıfı türünden nesneleri
vectore kopyalayabilirim


template <typename InIter, typename OutIter>
OutIter copy(InIter beg, InIter end, OutIter destbeg)
{
while (beg != end) {
*destbeg++ = *beg++;
}
return destbeg
}

!! eğer bir algoritma bir yere yazma işlemi yapıyorsa algoritmanın 
geri dönüş değeri en son yazılan konumdan sonraki konumdur.

-------------------
kodu anlamaya çalışma

template <typename InIter, typename OutIter>
OutIter copy(InIter beg, InIter end, OutIter destbeg)
{
while (beg != end) {
*destbeg++ = *beg++;
}
return destbeg
}

int main()
{
using namespace std;
vector<int> ivec{2, 5, 7, 9, 1, 3};
list<int> ilist; //tanımsız davranış olur liste BOŞ
//list<int> ilist(10);

Copy(ivec.begin(), ivec.end(), ilist.begin());
}

-------------------

1. algoritmaların parametre değişkeni iteratördür
Yani bir algoritma örneğin şunları yapabilir

-bir iteratör konumundaki nesneye atama yapabilir. (*destbeg++ = *beg++)

-aynı range'deki iki nesneyi takas edebilir

-range'in ilişkin olduğu contaninera (kaba) ekleme, silme yapamaz
sadece değerlerini değiştirebilir

-contanier boş ise c.begin ile c.end eşit olur

!!! asla asla boş contaninırın begin fonksiyonunun geri dönüş değerini direferans etme
!!! asla asla boş olsa da dolu olsa da end direferans etme

[begin, end) //begin konumu dahil end konumu hariç anlamına gelir

-----------------------

template <typename InIter, typename OutIter>
OutIter copy(InIter beg, InIter end, OutIter destbeg)
{
while (beg != end) {
*destbeg++ = *beg++;
}
return destbeg
}

int main()
{
using namespace std;
vector<int> ivec{2, 5, 7, 9, 1, 3};

auto iter = iter.begin(); //iter kullanarak bütün parametreler değişebilir
auto iter2 = iter(); //iter2  kullanarak bütün parametreler değişebilir
}

-----------------------

template <typename InIter, typename OutIter>
OutIter Copy(InIter beg, InIter end, OutIter destbeg)
{
while (beg != end) {
*destbeg++ = *beg++;
}
return destbeg
}

int main()
{
using namespace std;

vector<int> ivec{2, 5, 7, 9, 1, 3};
list<int> ilist(10);

auto iter = Copy(ivec.begin(), ivec.end(), ilist.begin());
}

-----------------
derleyici yukarıdakini şu şekilde yazar

template<>
list<int>::iterator Copy(vector<int>::iterator beg, vector<int>::iterator end, list<int>::iterator destbeg)
{
while (beg != end) {
*destbeg++ = *beg++;
}
return destbeg
}

------------------

int main()
{
using namespace std;

const char * const p[] = { "emre", "bilge", "damla", "tamer" , "gokhan"};

vector<string> svec(6);
copy(begin(p), end(p), begin(svec)); //hata yok

for (const auto& s : svec)
cout << s << ' ';
}

!! her zmaan en son yazdığı konumdan sonraki konumu döndürür


----------------------------------------

bu algoritmayı anlamak çok önemli

predicate : bool döndüren fonksiyonlara denir
unary predicate :  'bool iseven(int)'
binary predicate : 'bool is_less_than(int, int)'

count : belli bir değere sahip olanı sayaar
countif : belirli bir sorguya true döndürenleri sayıyor

copyif : bir range'deki öğelerden belirli bir koşulu sağlayanları bir yere yazıyor
======

template <typename InIter, typename OutIter, typename Upred>
OutIter CopyIf(InIter beg, InIter end, OutIter destbeg, Upred f)
{
while (beg != end) {
if (f(*beg)) {
*destbeg++ = *beg;
}
++beg;
}
return destbeg;
}


--------------

template <typename InIter, typename OutIter, typename Upred>
OutIter CopyIf(InIter beg, InIter end, OutIter destbeg, Upred f)
{
while (beg != end) {
if (f(*beg)) {
*destbeg++ = *beg;
}
++beg;
}
return destbeg;
}

bool iseven(int x)
{
return x % 2 == 0;
}

int main()
{
using namespace std;
vector<int> ivec{2,5, 7, 10, 4, 3, 6, 8 ,1 ,9};
list<int> ilist(10);

CopyIf(ivec.begin(), ivec.end(), ilist.begin(), iseven); //diziye kopylanan değerler vektördeki çift sayılar olucak

for(auto i : ilist) {
std::cout << i << ' ';
}
}

------------------

dinamik hale getirme

template <typename InIter, typename OutIter, typename Upred>
OutIter CopyIf(InIter beg, InIter end, OutIter destbeg, Upred f)
{
while (beg != end) {
if (f(*beg)) {
*destbeg++ = *beg;
}
++beg;
}
return destbeg;
}

bool iseven(int x)
{
return x % 2 == 0;
}

class DivPred {
public:
DivPred(int val) : mval{val}{}
bool operator()(int x) const
{
return x % mval == 0;
}
private:
mval;
};

int main()
{
using namespace std;
vector<int> ivec{2,5, 7, 10, 4, 3, 6, 8 ,1 ,9};
list<int> ilist(20);

int n;

std::cout <<"kaca tam bolunenleri kopyalayalım: ";
cin >> n;


CopyIf(ivec.begin(), ivec.end(), ililst.begin(), DivPred{n});

for(auto i : ilist) {
std::cout << i << ' ';
}
}

------------------
"
class DivPred {
public:
DivPred(int val) : mval{val}{}
bool operator()(int x) const
{
return x % mval == 0;
}
private:
mval;
};
"
yukarıdaki ifade de derleyiciye yazdırılabilinir 
bunu yapmanın yolu lambda kullanmaktır


template <typename InIter, typename OutIter, typename Upred>
OutIter CopyIf(InIter beg, InIter end, OutIter destbeg, Upred f)
{
while (beg != end) {
if (f(*beg)) {
*destbeg++ = *beg;
}
++beg;
}
return destbeg;
}

bool iseven(int x)
{
return x % 2 == 0;
}

//lambda ifadesi karşılığı derleyici sınıf tanımlar
//bu sınıfa closure type denir
//lambda ifadesi aslında closure object

int main()
{
using namespace std;
vector<int> ivec{2,5, 7, 10, 4, 3, 6, 8 ,1 ,9};
list<int> ilist(20);

int n;

std::cout <<"kaca tam bolunenleri kopyalayalım: ";
cin >> n;


CopyIf(ivec.begin(), ivec.end(), ililst.begin(),
[n](int x) {return x % n == 0; } //bu pr value bir ifade
);

for(auto i : ilist) {
std::cout << i << ' ';
}
}

-----------------------------------------

!! Bu kısımda hocanın yazdığı bir kaynak kod kullanılmıştır

int main()
{
using namespace std;

vector<string> svec;

//rname //rastgele isim döndürür 
//rsurname //rastgele soyisim döndürür
//rtown //rastgele şehir ismi döndürür

rfill(svec, 100, rname); //ismi svec olan vektöre 100 tane öğe insert etmiş olucak ancak insert edilen fonksiyonlar rname'den alınacak
print(svec); //aralarına 1 boşluk koyarak yazıcak
}

!! BU KISIM 'nutilty' dosyasında 

--------------------
1. kod(main.cpp) 

class Lenpred {
public:
Lenpred(std::size_t len) : mlen{len}{};
bool operator()(const std::string &s) const
{
    return s.length() == mlen;
}
private:
std::size_t mlen;
};

bool is_len_13(const std::string& s)
{
    return s.length() == 14;
}



int main()
{
    using namespace std;

    vector<string> svec;
    rfill(svec, 1000, []{return rname() + ' ' + rfname(); });

    std::ofstream ofs{ "out.txt "};
    if (!ofs) 
    {
        std::cerr << "out.txt dosyasi olusturulamadi";
        exit(EXIT_FAILURE);
    }

    
    //dinamik şekilde yapma
    std::size_t len;
    std::cout << "uzunluk degeri girin: ";
    cin >> len;
    
    vector<string> destvec(1000);
   
    //a copy if algoritması ile svec'te tutulan ogelerden uzunlugu 5 olanları detvec'e kopyalayın
   
    //auto iter = copy_if(svec.begin(), svec.end(), destvec.begin(), is_len_13);
    auto iter = copy_if(svec.begin(), svec.end(), destvec.begin(), 
    Lenpred{len}
    
    );
    
    
    print(destvec.begin(), iter, "\n", ofs);    
}

-------------

2. kod

int main()
{
    using namespace std;

    vector<string> svec;
    rfill(svec, 1000, rname);

    // kac tane tamer olduğu yazsın
    cout << count(svec.begin(), svec.end(), "tamer");

    
    std::string name;
    std::cout << "sayilacak ismi girin: ";
    cin >> name;
    cout << count(svec.begin(), svec.end(), name);

    char c;
    std::cout << "icinde hangi karakter olanlar sayilsin";
    cin >> c;
    auto n = count_if(begin(svec), end(svec), [c](const string& s){
        return s.find(c) != string::npos; //lambda ile yazdık
    });

    std::cout << n << '\n';

    
}

------------------

3. kod  

int main()
{
    using namespace std;

    vector<string> svec;

    rfill(svec, 200'000, []{rname() + ' ' + rfname() + ' ' + rfname(); });
    
    //sort random access iterator kategorisindedir, list sıralanamaz bu nedenle
    std::cout << "siralama basladi";
    sort(svec.begin(), svec.end());
    std::cout << "siralama sona erdi";
    
    std::ofstream ofs{"out.txt"};

    if(!ofs) {
        std::cerr << "out.txt dosyasi olusutulamadi\n";
        exit(EXIT_FAILURE);
    }

    print(svec, "\n", ofs);
}

------------

bool scompare(const std::string& s1, const std::string& s2)
{
    return s1.length() < s2.length() || (s1.length() == s2.length() && s1 < s2);
}

int main()
{
    using namespace std;

    vector<string> svec;

    rfill(svec, 200'000, []{rname() + ' ' + rfname() + ' ' + rfname(); });
    
    //sort random access iterator kategorisindedir, list sıralanamaz bu nedenle
    std::cout << "siralama basladi";
    sort(svec.begin(), svec.end(), scompare);
    std::cout << "siralama sona erdi";
    
    std::ofstream ofs{"out.txt"};

    if(!ofs) {
        std::cerr << "out.txt dosyasi olusutulamadi\n";
        exit(EXIT_FAILURE);
    }

    print(svec, "\n", ofs);
}

-------------------------------------------
!! Başka bir konuyu anlatmaya başladı

struct Nec {

};

int main()
{
using namespace std;

vector<string> svec{"ali", "can", "ece", "tan" };

const vector<string>::iterator iter = svec.begin();

iter.operator++(); //hata

*iter = "murathan"; //legal
//iter.operator*() = "murathan"; //aslında bunu yazarız

}

---------

int main()
{
using namespace std;

vector<string> svec{"ali", "can", "ece", "tan" };

vector<string>::const_iterator iter = svec.begin();

cout << *iter << "\n"; //gecerli
*iter = "tekin"; //hata
}

!! pointerdı const benzeri iterator kullanamk istiyorsak
iteratörümüzün türü iterator nestet type olmıycak const iterator
nestet type olucak

----------

int main()
{
using namespace std;

vector<string> svec{"ali", "can", "ece", "tan" };

auto iter = svec.cbegin(); //vectörün string açılımının const iteratörü türü
auto iter2 = cbegin(svec);

}

vektörün string açılımının const iteratörü türünden olması için
yukarıdakş yapılır

con.begin()
con.end()
begin(con)
end(con)

------------
//mülaktta sorulabilir

int main()
{
using namespace std;

vector<string> svec{"ali", "can", "ece", "tan" };

auto iter = svec.cbegin();
++iter; //geçerli, const olan iteratör değildir const olan nesnesin itarörü
*iter; //const ref. döndüreceği için hatalı
}

-----------

int main()
{
using namespace std;

vector<string> svec{"ali", "can", "ece", "tan" };

for (auto iter = svec.begin(); iter != svec.end(); ++iter) {
iter->c; //Hata olmaz
}
}

-----------
algoritmaların çok önemli bir özelliği ile tanışıyoruz

template <typename InIter>
void print_range(InIter beg, InIter end)
{
while (beg != end) {
std::cout << *beg++ << ' ';
}
std::cout << '\n';

}

int main()
{
using namespace std;

vector<string> svec{"bilge", "gurkan", "halid", "mehöet", "onur", "kutay"};
int a[] = {2,3,5,7,11,13,17,19};

//print_range(svec.begin(), svec.end());
print_range(svec.rbegin(), svec.rend()); //algoritmanın kodu değişmemesine rağmen nasıl olurda çıktı değişir
//print_range(begin(a), end(a));
print_range(rbegin(a), rend(a));

//bunun açıklaması biraz karmaşıktır
}

-----

template <typename InIter>
void print_range(InIter beg, InIter end)
{
while (beg != end) {
std::cout << *beg++ << ' ';
}
std::cout << '\n';

}

int main()
{
using namespace std;

vector<string> svec{"bilge", "gurkan", "halid", "mehöet", "onur", "kutay"};

vector<string>::reverse_iterator iter = svec.rbegin();
cout << *iter << "\n";
++iter;
}

 ARKA PLANDA ÇALIŞAN KODU İNCELEYELİM !!!!!!
 -------------------------------------------
 REVERSE ITERATÖR SINIF BIR ADAPTÖR SINIF YANI BU SINIF GERÇEK BIR ITERATÖR KULLANIYOR IÇINDE. BU DA GERÇEK KONUMU TUTUYOR.
 DİKKAT!!!! 
 REVERSE ITERATÖR, ITER KONUMUNU TUTTUĞUNDA FIZIKSEL OLARAK, * FUNCTIONU ONDAN BIR ÖNCEKI NESNENIN KONUMUNA ERIŞTIRIYOR.
 YANI RBEGIN GERÇEK OLARAK CONTAINERDAKI END KONUMUNU TUTUYOR AMA * / IÇERIK / DEREFERENCE / INDIRECTION OPERATÖRÜ O KONUMDAKI NESNEYE DEĞIL
 O KONUMDAN BIR ÖNCEKI NESNEYE ERIŞTIRIYOR.HILE BU !!!!!!!!!!!!

---------------
stl'deki arama fonksiyonları iteratör döndürür
aranan bulunursa range'de var ise o konumun değerini döndürüuor
eğer arana dğer yok ise fonksyiona geçtiğimiz end konumunu döndürüyor

---------------
//mülakatlarda çok sık sorulan bir soru

template <typename InIter, typename Key>
InIter Find(InIter beg, InIter end, const Key& val) //linear search
{
while (beg != end) {
if (*beg == val)
return beg;
++beg;
}
return beg;
}


int main()
{
using namespace std;

vector<int> ivec{4, 6, 7, 8, 1, 3, 98};

int ival = 1;
auto iter = find(ivec.begin(), ivec.end(), ival);
if (iter != ivec.end()) {
cout << "bulundu" << *iter << "\n";
cout << "index" << iter - ivec.begin() << "\n";

}
else {
cout << "bulunamadi\n"
}
}

---------

template <typename InIter, typename Key>
InIter Find(InIter beg, InIter end, const Key& val) //linear search
{
while (beg != end) {
if (*beg == val)
return beg;
++beg;
}
return beg;
}

int main()
{
using namespace std;

vector<int> ivec{1,1,1,4,6,7,81,3,2,2};

auto iter = Find(ivec.rbegin(), ivec.rend(), 1);

cout << *iterbase() << "\n"; //burası kritik (mülakatta sorulan kısm)
}

