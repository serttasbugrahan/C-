/////////////////////////////////////////////////////// 1. Ders //////////////////////////////////////////////

int main()
{
using namespace std;

mt19937 eng{ 78234u }; //kopyalamadan kaçın, 5000 bytlık bir yer kaplar
mt19937 eng{sdt::chrono::steady_clock::now().time_since_epoch().count()}

}

----------------
aşağıda kötü yazılmış kod vardır

int main()
{
using namespace std;

random_device rd;

mt1993 eng{ rd() }; 
}

-------------

int main()
{
using namespace std;

mt1993 eng{ random_device{}() }; //böyle yap, scope leakage'dan kaçınmış olursun
}

-------------
bernolli dağılımı
random_device //bize non-determenistik bir sayı kaynağıda verebilir, ancak garanti değildir

int main()
{
using namespace std;

mt1993 eng{ random_device{}() };
bernolli_distribution dist{ 0.81 }; //bize 0.81 olasıklla true değeri dağıtmasını sağlarız
constexpr std::size_t n = 1'000'000u;
int cnt{};

for (size_t i{}; i < n; ++i) {
if (dist(eng)) {
++cnt;
}
}

cout << static_cast<double>(cnt) / n << "\n";
}

--------------
//bu şekilde kullanmanın avantajı sadece çağırdığımız zaman hayat gelicektir

std::mt19937& engine()
{
static std::mt199937 eng{std::random_device{}()};

return eng;
}

int main()
{
using namespace std;

uniform_int_distribution dist{0, 99};

cout << dist(engine()) << "\n";
cout << dist(engine()) << "\n";
cout << dist(engine()) << "\n";

}

-----------------

distruubiton nesnelerin param fonksiyonu vardır
2 farklı distrubiton nesnesinin aynı parametreleri kullanmasını sağlayabiliriz

int main()
{
using namespace std;

uniform_int_distribution dist1{0, 99};

auto prm = dist1.param();

uniform_int_distribution dist2{dist1.param()};
}

----------------

int main()
{
using namespace std;

discrete_distribution dist{1.2, 3.4, 5.6, 7.8};

dist.param() //bütün değerleri paketlemiş olucam
}

------------

int main()
{
using namespace std;

vector<int> ivec(100'000);
mt19937 eng;
uniform_int_distribution dist{4657, 8771};

generate(ivec.begin(), ivec.end(), [&eng, &dist] {return dist(eng);})
}

-------------

shuffle algoritması

int main()
{
using namespace std;

vector<string> svec{"bugra", "mete", "emre", "furkan","kutay", "mehmet","melike","cemal"};

for (int i = 0; i < 1000; ++i) {
shuffle(svec.begin(), svec.end(), mt19937{76265});
copy(svec.begin(), svec.end(), ostream_iterator<string>{cout, " "});
(void)getchar();
std::system("cls");
}
}

=================================================

concurrency
-----------

biraz giriş seviyesinde anlatılacak çok uzun bir konu

belirli işlemlerin belirli bir zaman diliminde birlikte yapılması demektir

mesela hem konuşuyorum hem yemek yiyorum burada birden fazla işşin zamanda çakışma olarak yapılmasıdır 

concurrency denildiğinde belli bir zaman diliminde birden fazla işin yapılmsı demek 
parallizm denildiğinde birden fazla işin gerçekten aynı zaman diliminde birlikte yapılması demek (tamamen aynı anda)


concurrency : 1 expresso makinesi var 2 sıra var herkes oradan almak istiyor
parallel : 2 expresso makinesi var 2 sıra var insanlar ikiye bölğnmüş bir şekilde kahve alıyor

konu çok geniş sabırlı olmak lazım

------------------

burada kritik nokta işletim sisteminin concurrency ilgili apileri
doğal olarak her şeyi yapabilir. ancak soyutlama yapmak üzere programlama dilinin
kütüphanesini kullandığımız zaman flexiblity azalır. her şeyi standart kütüphane ile yapamayız ancak bu fark zamanla azalır

-------------------

diyelim ki hem standarat kütüphaneyi kullanmak istiyorum standart kütüpahenin yeterli olmadığı yerlerde pthreas kütüphanesini kullanmak istyorum 
o standart kütüphanenin yetmediği yerde handle ile işletim sisteminin programlarını kullanabiliyoruz

------------------

thread : aynı uygulamada birden fazla bakış

------------------

neden kullanırız?

-mesela bir yerden dosya indirirken aynı zamanda başka işler yapmak isteyebiliriz, bunları bloke etmemek için

-işlemlerin daha hızlı yapabilmek için

bu theradlerin oluşturmak maaliyetli bir işlemdir.

------------------

c++ concurrency kütüphanesi 3 farklı seviyede araç sunuyor

- çok yüksek seviye (std::asics)

- orta seviye (std::threads)

- alt seviye

--------------------------------

// bir thread nesnesi başka bir threadle ilişkili veya ilişkisis olabilir
1. thread nesnesine direk callable verebilirizi
2. thread nesnesine başka bir nesneyi taşuaybiliriz
3.thread copy delete edilmiştir, unique ptr gibi, move only type

çalıştırabilmek için bir thread nesnesini argüman vermemiz gerekiyor

#include <thread>

int main()
{
using namespace std;

thread th{/*callable*/} //callable, gerçek bir fonksiyon olabilir, function pointer olabilir, function object olabilir

}

---------------

int main()
{
using namespace std;

thread th1{[] {cout << "merhaba dunya";}}
thread th2{[] {cout << "merhaba dunya";}}
thread th3{[] {cout << "merhaba dunya";}}
thread th4{[] {cout << "merhaba dunya";}}
thread th5{[] {cout << "merhaba dunya";}}

}

-----------------

//thread nesnesi hem callable ister hemde callable'a gönderilecek argümanları ister

void func(int a, int b, int c) 
{

}

int main()
{
using namespace std;

thread tx{func, 10, 20, 30};

// bu thread nesnesine 2 şey yapabiliriz
//ya join ya detach

th.join(); //akış burayı geçebilmesi için func fonksiyonunun kodunun bitmesi gerekiyor, iş yükü bitmemiş ise bitene kadar beklensin anlamına gelir
//statment

tx.detach(); //ben bunun sorumluluğu ile ilgilenmiyorum arka planda bitene kadar çalışsın demektir
}

-------------------

eğer bir iş yükü verilmişse ve başka bir yere taşıma yapılmış ise ya da join ya da detach fonksiyonlarından birisi çağrılmış ise

thread nesnesinin dtoru çağrıldıysa dtor'un çağrıldığı thread nesnesi eğer joineble durumuda değil ise terminate çağrılır

-------------------
//terminate çağrılır

void nec_terminate()
{
std::cout << "nec terminate cagrildi\n";
(void)getchar();
std::abort();
}

void func()
{
std::cout << "ben func isleviyim beni cagirdilar\n";
}

int main()
{
using namespace std;

set_termiante(nec_terminate);

{
thread tx{ func };

//tx.join(); //terminate çağrılmaz
}

std::cout << "main devam ediyor\n";
}

-------------------

joineble durumunda olduğunu öğrenmek için joineble fonksiyonu çağrılır

void nec_terminate()
{
std::cout << "nec terminate cagrildi\n";
(void)getchar();
std::abort();
}

void func()
{
std::cout << "ben func isleviyim beni cagirdilar\n";
}

int main()
{
using namespace std;

boolalpha(cout);

thread t;

cout << t.joinable() << "\n"; //false yazar
}


---------------

void nec_terminate()
{
std::cout << "nec terminate cagrildi\n";
(void)getchar();
std::abort();
}

void func()
{
std::cout << "ben func isleviyim beni cagirdilar\n";
}

int main()
{
using namespace std;

boolalpha(cout);

thread t{ [] {} };

cout << t.joinable() << "\n";

t.join();

cout << t.joinable() << "\n"; //true olur  
}

--------------

void nec_terminate()
{
std::cout << "nec terminate cagrildi\n";
(void)getchar();
std::abort();
}

void func()
{
std::cout << "ben func isleviyim beni cagirdilar\n";
}

int main()
{
using namespace std;

boolalpha(cout);

thread t1{ [] {} };
thread t2{ move(t1) };

cout << t1.joinable() << "\n"; 
cout << t2.joinable() << "\n"; 

t2.join();

cout << t1.joinable() << "\n"; 
cout << t2.joinable() << "\n"; 
}

------------------

void nec_terminate()
{
std::cout << "nec terminate cagrildi\n";
(void)getchar();
std::abort();
}

void func()
{
std::cout << "ben func isleviyim beni cagirdilar\n";
}

int main()
{
using namespace std;

thread tx{func};
tx.join();

try {
tx.join();
}
catch (const std::exception& ex) {
std::cout << "exception caught: " << ex.what() << '\n';
}
}

--------------------
mülakatlarda kesinlikle RAII idiomu sorarlar
-------------------
thread nesnesini kullanmak yerine thread nesnesini sarmalayan jtthread türünden sınıf oluştuurlur

void foo() 
{
//code
}

int main()
{
using namespace std;

thread t{ foo };

func();


}

int main()
{
using namespace std;

try {
bar();
}
catch (const std::exception& ex) {
std::cout << "exception caught: " << ex.what() << '\n';
}

std::cout << "main devam ediyor\n";
}

--------------------

void func(char c)
{
for (int i = 0; i < 1000; ++i) {
std::cout.put(c);
}
}

int main()
{
for (char c = 'a'; c <= 'z'; ++c) {
func(c);
}
}

-------------------

func fonksiyonunu 26 ayrı thread'den çalıştırsaydım 

void func(char c)
{
for (int i = 0; i < 1000; ++i) {
std::cout.put(c);
}
}

int main()
{
using namespace std;

vector<thread> tvec(26);

char c = 'A';

for (auto& t : tvec) {
t = thread{func, c++}
}

//join etmek lazım yoksa termiante çağrılır

for (auto& t : tvec) {
t.join();
}

}

--------------------
//aşağıdaki şekilde de olabilirdi

void func(char c)
{
for (int i = 0; i < 1000; ++i) {
std::cout.put(c);
}
}

int main()
{
using namespace std;

vector<thread> tvec(26);

for (char c = 'A'; c <= 'Z'; ++c) {
tvec.push_back(thread{func, c});
}

for (auto& t : tvec) {
t.join();
}
}

-----------------

void func(char c)
{
for (int i = 0; i < 1000; ++i) {
if (i == 456)
throw std::runtime_error{"hata ki ne hata aman allahım!"};
std::cout.put(c);
}
}

int main()
{
using namespace std;

try {
thread tx{ func, 'S' };
}
catch (const std::exception& ex) {
std::cout << "exception caught: " << ex.what() << '\n';
}
}

----------------

int foo(int x, int y)
{
//code
return x* y;
}

int main()
{
using namespace std;

thread tx{foo, 10, 56};

tx.join();

//Bu fonksiyonun geri dönüş degerini alma sansımız yok

//farklı parametreler kullanabiliriz ancak hepsi başka bir alt başlıktır
}

--------------

thread sınıfı move only bunun önemli durumları vardır

std::thread make_thread()
{
std::thread tx{ [] {
std::cout << "necati ders anlatiyor\n";
}};

return tx;
}

std::thread func(std::thread tx)
{
return tx;
}

int main()
{
auto t1 = make_thread();
auto t2 = move(t1);
t1 = func(move(t2));

t1.join();
}

----------------

herhangi bir callable verebiliriz derken burada kastedilen nedir

void func(int x)
{
std::cout << x << '\n';
}

int main()
{
using namespace std;

thread t1(func, 1);
thread t2([](int x) {cout << x << '\n';}, 2);

t1.join();
t2.join();

}

-------------------

class Funtor {
public:
void operator()(int x)const
{
std::cout << x;
}
};

struct Nec {
static void print(int x)
{
std::cout << x;
}

void display(int x)const
{
std::cout << x;
}
};

void func(int x)
{
std::cout << x << '\n';
}

int main()
{
using namespace std;

Nec mynec;
thread t1(func, 1);
thread t2([](int x) {cout << x << '\n';}, 2);
thread t3(Functor{}, 3);
thread t4(Nec::print, 4);
thread t5(&Nec::display, mynec, 5);

t1.join();
t2.join();
t3.join();
t4.join();
t5.join();

}

------------------
//void func(int&&r) //hata kalkar
void func(int& r)
{
r += 200;
}

int main()
{
int x = 67;

thread t{ func, x}; //r value olarak gönderiri l value kabul etmez

cout << "x = " << x << '\n'; //sentaxx hatası olur
}

---------------

void func(int& r)
{
r += 200;
}

int main()
{
using namespace std;

thread tx{func, ref(x)}; //legal

tx.join();

cout << "x = " << x << '\n';
}

---------------

void func(string&& r)
{
std::cout << r.size() << '\n';
}

int main()
{
using namespace std;

string name{"bugra serttas"}; //r value olarak göndeirir bu yüzden legal

thread tx{func, name};
}

-----------------

void func(string&& r)
{
std::cout << r.size() << '\n';
}

int main()
{
using namespace std;

string name{"bugra serttas"}; 

thread tx{func, name};

tx.join();

cout << name.size() << "\n";
}

------------------

void func(int&& r)
{
auto x = std::move(r);
std::cout << r.size() << '\n';
}

int main()
{
using namespace std;

string name{"bugra serttas"}; 

thread tx{func, name};

tx.join();

cout << name.size() << "\n";
}

//////////////////////////////////////////////////// 2. Ders /////////////////////////////////////////////









